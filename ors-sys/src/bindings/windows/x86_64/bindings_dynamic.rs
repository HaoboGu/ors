/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const ORT_API_VERSION: u32 = 12;
pub const __SAL_H_FULL_VER: u32 = 140050727;
pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
pub const __drv_typeConst: u32 = 0;
pub const __drv_typeCond: u32 = 1;
pub const __drv_typeBitset: u32 = 2;
pub const __drv_typeExpr: u32 = 3;
pub type va_list = *mut ::std::os::raw::c_char;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type lldiv_t = _lldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    fn test_field_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDOUBLE),
                "::",
                stringify!(ld)
            )
        );
    }
    test_field_ld();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_DOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_DOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_FLOAT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_FLOAT),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LONGDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LONGDOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    fn test_field_ld12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDBL12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDBL12),
                "::",
                stringify!(ld12)
            )
        );
    }
    test_field_ld12();
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED:
    ONNXTensorElementDataType = 0;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT: ONNXTensorElementDataType =
    1;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8: ONNXTensorElementDataType =
    2;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8: ONNXTensorElementDataType =
    3;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16:
    ONNXTensorElementDataType = 4;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16: ONNXTensorElementDataType =
    5;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32: ONNXTensorElementDataType =
    6;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64: ONNXTensorElementDataType =
    7;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING:
    ONNXTensorElementDataType = 8;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL: ONNXTensorElementDataType =
    9;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16:
    ONNXTensorElementDataType = 10;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE:
    ONNXTensorElementDataType = 11;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32:
    ONNXTensorElementDataType = 12;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64:
    ONNXTensorElementDataType = 13;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64:
    ONNXTensorElementDataType = 14;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128:
    ONNXTensorElementDataType = 15;
pub const ONNXTensorElementDataType_ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16:
    ONNXTensorElementDataType = 16;
#[doc = " Copied from TensorProto::DataType"]
#[doc = " Currently, Ort doesn't support complex64, complex128"]
pub type ONNXTensorElementDataType = ::std::os::raw::c_int;
pub const ONNXType_ONNX_TYPE_UNKNOWN: ONNXType = 0;
pub const ONNXType_ONNX_TYPE_TENSOR: ONNXType = 1;
pub const ONNXType_ONNX_TYPE_SEQUENCE: ONNXType = 2;
pub const ONNXType_ONNX_TYPE_MAP: ONNXType = 3;
pub const ONNXType_ONNX_TYPE_OPAQUE: ONNXType = 4;
pub const ONNXType_ONNX_TYPE_SPARSETENSOR: ONNXType = 5;
pub const ONNXType_ONNX_TYPE_OPTIONAL: ONNXType = 6;
pub type ONNXType = ::std::os::raw::c_int;
pub const OrtSparseFormat_ORT_SPARSE_UNDEFINED: OrtSparseFormat = 0;
pub const OrtSparseFormat_ORT_SPARSE_COO: OrtSparseFormat = 1;
pub const OrtSparseFormat_ORT_SPARSE_CSRC: OrtSparseFormat = 2;
pub const OrtSparseFormat_ORT_SPARSE_BLOCK_SPARSE: OrtSparseFormat = 4;
pub type OrtSparseFormat = ::std::os::raw::c_int;
pub const OrtSparseIndicesFormat_ORT_SPARSE_COO_INDICES: OrtSparseIndicesFormat = 0;
pub const OrtSparseIndicesFormat_ORT_SPARSE_CSR_INNER_INDICES: OrtSparseIndicesFormat = 1;
pub const OrtSparseIndicesFormat_ORT_SPARSE_CSR_OUTER_INDICES: OrtSparseIndicesFormat = 2;
pub const OrtSparseIndicesFormat_ORT_SPARSE_BLOCK_SPARSE_INDICES: OrtSparseIndicesFormat = 3;
pub type OrtSparseIndicesFormat = ::std::os::raw::c_int;
#[doc = "< Verbose informational messages (least severe)."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_VERBOSE: OrtLoggingLevel = 0;
#[doc = "< Informational messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_INFO: OrtLoggingLevel = 1;
#[doc = "< Warning messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_WARNING: OrtLoggingLevel = 2;
#[doc = "< Error messages."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_ERROR: OrtLoggingLevel = 3;
#[doc = "< Fatal error messages (most severe)."]
pub const OrtLoggingLevel_ORT_LOGGING_LEVEL_FATAL: OrtLoggingLevel = 4;
#[doc = " \\brief Logging severity levels"]
#[doc = ""]
#[doc = " In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show."]
pub type OrtLoggingLevel = ::std::os::raw::c_int;
pub const OrtErrorCode_ORT_OK: OrtErrorCode = 0;
pub const OrtErrorCode_ORT_FAIL: OrtErrorCode = 1;
pub const OrtErrorCode_ORT_INVALID_ARGUMENT: OrtErrorCode = 2;
pub const OrtErrorCode_ORT_NO_SUCHFILE: OrtErrorCode = 3;
pub const OrtErrorCode_ORT_NO_MODEL: OrtErrorCode = 4;
pub const OrtErrorCode_ORT_ENGINE_ERROR: OrtErrorCode = 5;
pub const OrtErrorCode_ORT_RUNTIME_EXCEPTION: OrtErrorCode = 6;
pub const OrtErrorCode_ORT_INVALID_PROTOBUF: OrtErrorCode = 7;
pub const OrtErrorCode_ORT_MODEL_LOADED: OrtErrorCode = 8;
pub const OrtErrorCode_ORT_NOT_IMPLEMENTED: OrtErrorCode = 9;
pub const OrtErrorCode_ORT_INVALID_GRAPH: OrtErrorCode = 10;
pub const OrtErrorCode_ORT_EP_FAIL: OrtErrorCode = 11;
pub type OrtErrorCode = ::std::os::raw::c_int;
pub const OrtOpAttrType_ORT_OP_ATTR_UNDEFINED: OrtOpAttrType = 0;
pub const OrtOpAttrType_ORT_OP_ATTR_INT: OrtOpAttrType = 1;
pub const OrtOpAttrType_ORT_OP_ATTR_INTS: OrtOpAttrType = 2;
pub const OrtOpAttrType_ORT_OP_ATTR_FLOAT: OrtOpAttrType = 3;
pub const OrtOpAttrType_ORT_OP_ATTR_FLOATS: OrtOpAttrType = 4;
pub const OrtOpAttrType_ORT_OP_ATTR_STRING: OrtOpAttrType = 5;
pub const OrtOpAttrType_ORT_OP_ATTR_STRINGS: OrtOpAttrType = 6;
pub type OrtOpAttrType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtEnv {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMemoryInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtIoBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSession {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtRunOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorTypeAndShapeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSessionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOpDomain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMapTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSequenceTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtModelMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadPoolParams {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadingOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtArenaCfg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtPrepackedWeightsContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptionsV2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpAttr {
    _unused: [u8; 0],
}
pub type OrtStatusPtr = *mut OrtStatus;
#[doc = " \\brief Memory allocation interface"]
#[doc = ""]
#[doc = " Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators."]
#[doc = ""]
#[doc = " When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtAllocator {
    #[doc = "< Must be initialized to ORT_API_VERSION"]
    pub version: u32,
    #[doc = "< Returns a pointer to an allocated block of `size` bytes"]
    pub Alloc: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = "< Free a block of memory previously allocated with OrtAllocator::Alloc"]
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, p: *mut ::std::os::raw::c_void),
    >,
    #[doc = "< Return a pointer to an ::OrtMemoryInfo that describes this allocator"]
    pub Info: ::std::option::Option<
        unsafe extern "C" fn(this_: *const OrtAllocator) -> *const OrtMemoryInfo,
    >,
}
#[test]
fn bindgen_test_layout_OrtAllocator() {
    assert_eq!(
        ::std::mem::size_of::<OrtAllocator>(),
        32usize,
        concat!("Size of: ", stringify!(OrtAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtAllocator))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_Alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alloc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Alloc)
            )
        );
    }
    test_field_Alloc();
    fn test_field_Free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Free) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Free)
            )
        );
    }
    test_field_Free();
    fn test_field_Info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtAllocator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Info) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtAllocator),
                "::",
                stringify!(Info)
            )
        );
    }
    test_field_Info();
}
pub type OrtLoggingFunction = ::std::option::Option<
    unsafe extern "C" fn(
        param: *mut ::std::os::raw::c_void,
        severity: OrtLoggingLevel,
        category: *const ::std::os::raw::c_char,
        logid: *const ::std::os::raw::c_char,
        code_location: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub const GraphOptimizationLevel_ORT_DISABLE_ALL: GraphOptimizationLevel = 0;
pub const GraphOptimizationLevel_ORT_ENABLE_BASIC: GraphOptimizationLevel = 1;
pub const GraphOptimizationLevel_ORT_ENABLE_EXTENDED: GraphOptimizationLevel = 2;
pub const GraphOptimizationLevel_ORT_ENABLE_ALL: GraphOptimizationLevel = 99;
#[doc = " \\brief Graph optimization level"]
#[doc = ""]
#[doc = " Refer to https://www.onnxruntime.ai/docs/resources/graph-optimizations.html"]
#[doc = " for an in-depth understanding of Graph Optimizations"]
pub type GraphOptimizationLevel = ::std::os::raw::c_int;
pub const ExecutionMode_ORT_SEQUENTIAL: ExecutionMode = 0;
pub const ExecutionMode_ORT_PARALLEL: ExecutionMode = 1;
pub type ExecutionMode = ::std::os::raw::c_int;
pub const OrtLanguageProjection_ORT_PROJECTION_C: OrtLanguageProjection = 0;
pub const OrtLanguageProjection_ORT_PROJECTION_CPLUSPLUS: OrtLanguageProjection = 1;
pub const OrtLanguageProjection_ORT_PROJECTION_CSHARP: OrtLanguageProjection = 2;
pub const OrtLanguageProjection_ORT_PROJECTION_PYTHON: OrtLanguageProjection = 3;
pub const OrtLanguageProjection_ORT_PROJECTION_JAVA: OrtLanguageProjection = 4;
pub const OrtLanguageProjection_ORT_PROJECTION_WINML: OrtLanguageProjection = 5;
pub const OrtLanguageProjection_ORT_PROJECTION_NODEJS: OrtLanguageProjection = 6;
#[doc = " \\brief Language projection identifiers"]
#[doc = " /see OrtApi::SetLanguageProjection"]
pub type OrtLanguageProjection = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelContext {
    _unused: [u8; 0],
}
pub const OrtAllocatorType_OrtInvalidAllocator: OrtAllocatorType = -1;
pub const OrtAllocatorType_OrtDeviceAllocator: OrtAllocatorType = 0;
pub const OrtAllocatorType_OrtArenaAllocator: OrtAllocatorType = 1;
pub type OrtAllocatorType = ::std::os::raw::c_int;
#[doc = "< Any CPU memory used by non-CPU execution provider"]
pub const OrtMemType_OrtMemTypeCPUInput: OrtMemType = -2;
#[doc = "< CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED"]
pub const OrtMemType_OrtMemTypeCPUOutput: OrtMemType = -1;
#[doc = "< Temporary CPU accessible memory allocated by non-CPU execution provider, i.e. CUDA_PINNED"]
pub const OrtMemType_OrtMemTypeCPU: OrtMemType = -1;
#[doc = "< The default allocator for execution provider"]
pub const OrtMemType_OrtMemTypeDefault: OrtMemType = 0;
#[doc = " \\brief Memory types for allocated memory, execution provider specific types should be extended in each provider."]
pub type OrtMemType = ::std::os::raw::c_int;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchExhaustive: OrtCudnnConvAlgoSearch = 0;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchHeuristic: OrtCudnnConvAlgoSearch = 1;
pub const OrtCudnnConvAlgoSearch_OrtCudnnConvAlgoSearchDefault: OrtCudnnConvAlgoSearch = 2;
#[doc = " \\brief Algorithm to use for cuDNN Convolution Op"]
pub type OrtCudnnConvAlgoSearch = ::std::os::raw::c_int;
#[doc = " \\brief CUDA Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_CUDA"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptions {
    #[doc = " \\brief CUDA device Id"]
    #[doc = "   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief CUDA Convolution algorithm search configuration."]
    #[doc = "   See enum OrtCudnnConvAlgoSearch for more details."]
    #[doc = "   Defaults to OrtCudnnConvAlgoSearchExhaustive."]
    pub cudnn_conv_algo_search: OrtCudnnConvAlgoSearch,
    #[doc = " \\brief CUDA memory limit (To use all possible memory pass in maximum size_t)"]
    #[doc = "   Defaults to SIZE_MAX."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena"]
    #[doc = "   0 = kNextPowerOfTwo<br>"]
    #[doc = "   1 = kSameAsRequested<br>"]
    #[doc = "   Defaults to 0."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP"]
    #[doc = "   0 = Use separate streams for copying and compute."]
    #[doc = "   1 = Use the same stream for copying and compute."]
    #[doc = "   Defaults to 1."]
    #[doc = "   WARNING: Setting this to 0 may result in data races for some models."]
    #[doc = "   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream"]
    #[doc = "   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream."]
    #[doc = "   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief CUDA memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
}
#[test]
fn bindgen_test_layout_OrtCUDAProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtCUDAProviderOptions>(),
        48usize,
        concat!("Size of: ", stringify!(OrtCUDAProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCUDAProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCUDAProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_cudnn_conv_algo_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cudnn_conv_algo_search) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(cudnn_conv_algo_search)
            )
        );
    }
    test_field_cudnn_conv_algo_search();
    fn test_field_gpu_mem_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(gpu_mem_limit)
            )
        );
    }
    test_field_gpu_mem_limit();
    fn test_field_arena_extend_strategy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(arena_extend_strategy)
            )
        );
    }
    test_field_arena_extend_strategy();
    fn test_field_do_copy_in_default_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(do_copy_in_default_stream)
            )
        );
    }
    test_field_do_copy_in_default_stream();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_default_memory_arena_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCUDAProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCUDAProviderOptions),
                "::",
                stringify!(default_memory_arena_cfg)
            )
        );
    }
    test_field_default_memory_arena_cfg();
}
#[doc = " \\brief ROCM Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_ROCM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtROCMProviderOptions {
    #[doc = " \\brief ROCM device Id"]
    #[doc = "   Defaults to 0."]
    pub device_id: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM MIOpen Convolution algorithm exaustive search option."]
    #[doc = "   Defaults to 0 (false)."]
    pub miopen_conv_exhaustive_search: ::std::os::raw::c_int,
    #[doc = " \\brief ROCM memory limit (To use all possible memory pass in maximum size_t)"]
    #[doc = "   Defaults to SIZE_MAX."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub gpu_mem_limit: usize,
    #[doc = " \\brief Strategy used to grow the memory arena"]
    #[doc = "   0 = kNextPowerOfTwo<br>"]
    #[doc = "   1 = kSameAsRequested<br>"]
    #[doc = "   Defaults to 0."]
    #[doc = "   \\note If a ::OrtArenaCfg has been applied, it will override this field"]
    pub arena_extend_strategy: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP"]
    #[doc = "   0 = Use separate streams for copying and compute."]
    #[doc = "   1 = Use the same stream for copying and compute."]
    #[doc = "   Defaults to 1."]
    #[doc = "   WARNING: Setting this to 0 may result in data races for some models."]
    #[doc = "   Please see issue #4829 for more details."]
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    #[doc = " \\brief Flag indicating if there is a user provided compute stream"]
    #[doc = "   Defaults to 0."]
    pub has_user_compute_stream: ::std::os::raw::c_int,
    #[doc = " \\brief User provided compute stream."]
    #[doc = "   If provided, please set `has_user_compute_stream` to 1."]
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    #[doc = " \\brief ROCM memory arena configuration parameters"]
    pub default_memory_arena_cfg: *mut OrtArenaCfg,
}
#[test]
fn bindgen_test_layout_OrtROCMProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtROCMProviderOptions>(),
        48usize,
        concat!("Size of: ", stringify!(OrtROCMProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtROCMProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtROCMProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_miopen_conv_exhaustive_search() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).miopen_conv_exhaustive_search) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(miopen_conv_exhaustive_search)
            )
        );
    }
    test_field_miopen_conv_exhaustive_search();
    fn test_field_gpu_mem_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpu_mem_limit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(gpu_mem_limit)
            )
        );
    }
    test_field_gpu_mem_limit();
    fn test_field_arena_extend_strategy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arena_extend_strategy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(arena_extend_strategy)
            )
        );
    }
    test_field_arena_extend_strategy();
    fn test_field_do_copy_in_default_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).do_copy_in_default_stream) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(do_copy_in_default_stream)
            )
        );
    }
    test_field_do_copy_in_default_stream();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_default_memory_arena_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtROCMProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_memory_arena_cfg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtROCMProviderOptions),
                "::",
                stringify!(default_memory_arena_cfg)
            )
        );
    }
    test_field_default_memory_arena_cfg();
}
#[doc = " \\brief TensorRT Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptions {
    #[doc = "< CUDA device id (0 = default device)"]
    pub device_id: ::std::os::raw::c_int,
    pub has_user_compute_stream: ::std::os::raw::c_int,
    pub user_compute_stream: *mut ::std::os::raw::c_void,
    pub trt_max_partition_iterations: ::std::os::raw::c_int,
    pub trt_min_subgraph_size: ::std::os::raw::c_int,
    pub trt_max_workspace_size: usize,
    pub trt_fp16_enable: ::std::os::raw::c_int,
    pub trt_int8_enable: ::std::os::raw::c_int,
    pub trt_int8_calibration_table_name: *const ::std::os::raw::c_char,
    pub trt_int8_use_native_calibration_table: ::std::os::raw::c_int,
    pub trt_dla_enable: ::std::os::raw::c_int,
    pub trt_dla_core: ::std::os::raw::c_int,
    pub trt_dump_subgraphs: ::std::os::raw::c_int,
    pub trt_engine_cache_enable: ::std::os::raw::c_int,
    pub trt_engine_cache_path: *const ::std::os::raw::c_char,
    pub trt_engine_decryption_enable: ::std::os::raw::c_int,
    pub trt_engine_decryption_lib_path: *const ::std::os::raw::c_char,
    pub trt_force_sequential_engine_build: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtTensorRTProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtTensorRTProviderOptions>(),
        104usize,
        concat!("Size of: ", stringify!(OrtTensorRTProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtTensorRTProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtTensorRTProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_has_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_user_compute_stream) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(has_user_compute_stream)
            )
        );
    }
    test_field_has_user_compute_stream();
    fn test_field_user_compute_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_compute_stream) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(user_compute_stream)
            )
        );
    }
    test_field_user_compute_stream();
    fn test_field_trt_max_partition_iterations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_max_partition_iterations) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_max_partition_iterations)
            )
        );
    }
    test_field_trt_max_partition_iterations();
    fn test_field_trt_min_subgraph_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_min_subgraph_size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_min_subgraph_size)
            )
        );
    }
    test_field_trt_min_subgraph_size();
    fn test_field_trt_max_workspace_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_max_workspace_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_max_workspace_size)
            )
        );
    }
    test_field_trt_max_workspace_size();
    fn test_field_trt_fp16_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_fp16_enable) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_fp16_enable)
            )
        );
    }
    test_field_trt_fp16_enable();
    fn test_field_trt_int8_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_enable) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_enable)
            )
        );
    }
    test_field_trt_int8_enable();
    fn test_field_trt_int8_calibration_table_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_calibration_table_name) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_calibration_table_name)
            )
        );
    }
    test_field_trt_int8_calibration_table_name();
    fn test_field_trt_int8_use_native_calibration_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_int8_use_native_calibration_table) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_int8_use_native_calibration_table)
            )
        );
    }
    test_field_trt_int8_use_native_calibration_table();
    fn test_field_trt_dla_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dla_enable) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dla_enable)
            )
        );
    }
    test_field_trt_dla_enable();
    fn test_field_trt_dla_core() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dla_core) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dla_core)
            )
        );
    }
    test_field_trt_dla_core();
    fn test_field_trt_dump_subgraphs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_dump_subgraphs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_dump_subgraphs)
            )
        );
    }
    test_field_trt_dump_subgraphs();
    fn test_field_trt_engine_cache_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_cache_enable) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_cache_enable)
            )
        );
    }
    test_field_trt_engine_cache_enable();
    fn test_field_trt_engine_cache_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_cache_path) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_cache_path)
            )
        );
    }
    test_field_trt_engine_cache_path();
    fn test_field_trt_engine_decryption_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_decryption_enable) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_decryption_enable)
            )
        );
    }
    test_field_trt_engine_decryption_enable();
    fn test_field_trt_engine_decryption_lib_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_engine_decryption_lib_path) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_engine_decryption_lib_path)
            )
        );
    }
    test_field_trt_engine_decryption_lib_path();
    fn test_field_trt_force_sequential_engine_build() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtTensorRTProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trt_force_sequential_engine_build) as usize
                    - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtTensorRTProviderOptions),
                "::",
                stringify!(trt_force_sequential_engine_build)
            )
        );
    }
    test_field_trt_force_sequential_engine_build();
}
#[doc = " \\brief MIGraphX Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMIGraphXProviderOptions {
    pub device_id: ::std::os::raw::c_int,
    pub migraphx_fp16_enable: ::std::os::raw::c_int,
    pub migraphx_int8_enable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OrtMIGraphXProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtMIGraphXProviderOptions>(),
        12usize,
        concat!("Size of: ", stringify!(OrtMIGraphXProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtMIGraphXProviderOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(OrtMIGraphXProviderOptions))
    );
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_migraphx_fp16_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).migraphx_fp16_enable) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(migraphx_fp16_enable)
            )
        );
    }
    test_field_migraphx_fp16_enable();
    fn test_field_migraphx_int8_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtMIGraphXProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).migraphx_int8_enable) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtMIGraphXProviderOptions),
                "::",
                stringify!(migraphx_int8_enable)
            )
        );
    }
    test_field_migraphx_int8_enable();
}
#[doc = " \\brief OpenVINO Provider Options"]
#[doc = ""]
#[doc = " \\see OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpenVINOProviderOptions {
    #[doc = " \\brief Device type string"]
    #[doc = ""]
    #[doc = " Valid settings are one of: \"CPU_FP32\", \"GPU_FP32\", \"GPU_FP16\", \"MYRIAD_FP16\", \"VAD-M_FP16\" or \"VAD-F_FP32\""]
    pub device_type: *const ::std::os::raw::c_char,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_vpu_fast_compile: ::std::os::raw::c_uchar,
    pub device_id: *const ::std::os::raw::c_char,
    #[doc = "< 0 = Use default number of threads"]
    pub num_of_threads: usize,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub use_compiled_network: ::std::os::raw::c_uchar,
    pub blob_dump_path: *const ::std::os::raw::c_char,
    pub context: *mut ::std::os::raw::c_void,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_opencl_throttling: ::std::os::raw::c_uchar,
    #[doc = "< 0 = disabled, nonzero = enabled"]
    pub enable_dynamic_shapes: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_OrtOpenVINOProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtOpenVINOProviderOptions>(),
        64usize,
        concat!("Size of: ", stringify!(OrtOpenVINOProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtOpenVINOProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtOpenVINOProviderOptions))
    );
    fn test_field_device_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(device_type)
            )
        );
    }
    test_field_device_type();
    fn test_field_enable_vpu_fast_compile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_vpu_fast_compile) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_vpu_fast_compile)
            )
        );
    }
    test_field_enable_vpu_fast_compile();
    fn test_field_device_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(device_id)
            )
        );
    }
    test_field_device_id();
    fn test_field_num_of_threads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_of_threads) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(num_of_threads)
            )
        );
    }
    test_field_num_of_threads();
    fn test_field_use_compiled_network() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).use_compiled_network) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(use_compiled_network)
            )
        );
    }
    test_field_use_compiled_network();
    fn test_field_blob_dump_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_dump_path) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(blob_dump_path)
            )
        );
    }
    test_field_blob_dump_path();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_enable_opencl_throttling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_opencl_throttling) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_opencl_throttling)
            )
        );
    }
    test_field_enable_opencl_throttling();
    fn test_field_enable_dynamic_shapes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtOpenVINOProviderOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_dynamic_shapes) as usize - ptr as usize
            },
            57usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtOpenVINOProviderOptions),
                "::",
                stringify!(enable_dynamic_shapes)
            )
        );
    }
    test_field_enable_dynamic_shapes();
}
#[doc = " \\brief The helper interface to get the right version of OrtApi"]
#[doc = ""]
#[doc = " Get a pointer to this structure through ::OrtGetApiBase"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApiBase {
    #[doc = " \\brief Get a pointer to the requested version of the ::OrtApi"]
    #[doc = ""]
    #[doc = " \\param[in] version Must be ::ORT_API_VERSION"]
    #[doc = " \\return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime"]
    #[doc = "   older than the version created with this header file."]
    pub GetApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtApi>,
    #[doc = "< Returns a null terminated string of the version of the Onnxruntime library (eg: \"1.8.1\")"]
    pub GetVersionString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_OrtApiBase() {
    assert_eq!(
        ::std::mem::size_of::<OrtApiBase>(),
        16usize,
        concat!("Size of: ", stringify!(OrtApiBase))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApiBase>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApiBase))
    );
    fn test_field_GetApi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApiBase>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApiBase),
                "::",
                stringify!(GetApi)
            )
        );
    }
    test_field_GetApi();
    fn test_field_GetVersionString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApiBase>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVersionString) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApiBase),
                "::",
                stringify!(GetVersionString)
            )
        );
    }
    test_field_GetVersionString();
}
#[doc = " \\brief Thread work loop function"]
#[doc = ""]
#[doc = " Onnxruntime will provide the working loop on custom thread creation"]
#[doc = " Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn"]
pub type OrtThreadWorkerFn =
    ::std::option::Option<unsafe extern "C" fn(ort_worker_fn_param: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomHandleType {
    pub __place_holder: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_OrtCustomHandleType() {
    assert_eq!(
        ::std::mem::size_of::<OrtCustomHandleType>(),
        1usize,
        concat!("Size of: ", stringify!(OrtCustomHandleType))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCustomHandleType>(),
        1usize,
        concat!("Alignment of ", stringify!(OrtCustomHandleType))
    );
    fn test_field___place_holder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomHandleType>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__place_holder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomHandleType),
                "::",
                stringify!(__place_holder)
            )
        );
    }
    test_field___place_holder();
}
pub type OrtCustomThreadHandle = *const OrtCustomHandleType;
#[doc = " \\brief Ort custom thread creation function"]
#[doc = ""]
#[doc = " The function should return a thread handle to be used in onnxruntime thread pools"]
#[doc = " Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread"]
pub type OrtCustomCreateThreadFn = ::std::option::Option<
    unsafe extern "C" fn(
        ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ort_thread_worker_fn: OrtThreadWorkerFn,
        ort_worker_fn_param: *mut ::std::os::raw::c_void,
    ) -> OrtCustomThreadHandle,
>;
#[doc = " \\brief Custom thread join function"]
#[doc = ""]
#[doc = " Onnxruntime thread pool destructor will call the function to join a custom thread."]
#[doc = " Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn"]
pub type OrtCustomJoinThreadFn =
    ::std::option::Option<unsafe extern "C" fn(ort_custom_thread_handle: OrtCustomThreadHandle)>;
#[doc = " \\brief The C API"]
#[doc = ""]
#[doc = " All C API functions are defined inside this structure as pointers to functions."]
#[doc = " Call OrtApiBase::GetApi to get a pointer to it"]
#[doc = ""]
#[doc = " \\nosubgrouping"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApi {
    #[doc = " \\brief Create an OrtStatus from a null terminated string"]
    #[doc = ""]
    #[doc = " \\param[in] code"]
    #[doc = " \\param[in] msg A null-terminated string. Its contents will be copied."]
    #[doc = " \\return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus"]
    pub CreateStatus: ::std::option::Option<
        unsafe extern "C" fn(
            code: OrtErrorCode,
            msg: *const ::std::os::raw::c_char,
        ) -> *mut OrtStatus,
    >,
    #[doc = " \\brief Get OrtErrorCode from OrtStatus"]
    #[doc = ""]
    #[doc = " \\param[in] status"]
    #[doc = " \\return OrtErrorCode that \\p status was created with"]
    pub GetErrorCode:
        ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> OrtErrorCode>,
    #[doc = " \\brief Get error string from OrtStatus"]
    #[doc = ""]
    #[doc = " \\param[in] status"]
    #[doc = " \\return The error message inside the `status`. Do not free the returned value."]
    pub GetErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(status: *const OrtStatus) -> *const ::std::os::raw::c_char,
    >,
    pub CreateEnv: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLogger: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub EnableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub DisableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub CreateSession: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const wchar_t,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub Run: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            inputs: *const *const OrtValue,
            input_len: usize,
            output_names: *const *const ::std::os::raw::c_char,
            output_names_len: usize,
            outputs: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(options: *mut *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetOptimizedModelFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            optimized_model_filepath: *const wchar_t,
        ) -> OrtStatusPtr,
    >,
    pub CloneSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(
            in_options: *const OrtSessionOptions,
            out_options: *mut *mut OrtSessionOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionExecutionMode: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            execution_mode: ExecutionMode,
        ) -> OrtStatusPtr,
    >,
    pub EnableProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            profile_file_prefix: *const wchar_t,
        ) -> OrtStatusPtr,
    >,
    pub DisableProfiling: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetSessionLogId: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            logid: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionGraphOptimizationLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            graph_optimization_level: GraphOptimizationLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            domain: *const ::std::os::raw::c_char,
            out: *mut *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub CustomOpDomain_Add: ::std::option::Option<
        unsafe extern "C" fn(
            custom_op_domain: *mut OrtCustomOpDomain,
            op: *const OrtCustomOp,
        ) -> OrtStatusPtr,
    >,
    pub AddCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            custom_op_domain: *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_path: *const ::std::os::raw::c_char,
            library_handle: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerCount: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut usize) -> OrtStatusPtr,
    >,
    pub SessionGetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerName: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            index: usize,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateRunOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsSetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            run_tag: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_verbosity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            log_severity_level: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            run_tag: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsUnsetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub CreateTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorWithDataAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            p_data_len: usize,
            shape: *const i64,
            shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub IsTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMutableData: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const *const ::std::os::raw::c_char,
            s_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorDataLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, len: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorContent: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s: *mut ::std::os::raw::c_void,
            s_len: usize,
            offsets: *mut usize,
            offsets_len: usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToTensorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOnnxTypeFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(type_info: *const OrtTypeInfo, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateTensorTypeAndShapeInfo: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr,
    >,
    pub SetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            type_: ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub SetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            dim_values: *const i64,
            dim_count: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensionsCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_values: *mut i64,
            dim_values_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetSymbolicDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_params: *mut *const ::std::os::raw::c_char,
            dim_params_length: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorShapeElementCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTypeInfo) -> OrtStatusPtr,
    >,
    pub GetValueType: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            type_: OrtAllocatorType,
            id: ::std::os::raw::c_int,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CreateCpuMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_: OrtAllocatorType,
            mem_type: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CompareMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const OrtMemoryInfo,
            info2: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetName: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetId: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetMemType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemType) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtAllocatorType) -> OrtStatusPtr,
    >,
    pub AllocatorAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            size: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorFree: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *mut OrtAllocator,
            p: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_allocator: *const OrtAllocator,
            out: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetAllocatorWithDefaultOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
    pub AddFreeDimensionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_denotation: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            index: ::std::os::raw::c_int,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetValueCount: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut usize) -> OrtStatusPtr,
    >,
    pub CreateValue: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const *const OrtValue,
            num_values: usize,
            value_type: ONNXType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            data_container: *const ::std::os::raw::c_void,
            data_container_size: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            in_: *const OrtValue,
            data_container: *mut ::std::os::raw::c_void,
            data_container_size: usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_string: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_char,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut usize) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            index: usize,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut OrtKernelContext,
            index: usize,
            dim_values: *const i64,
            dim_count: usize,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseEnv: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtEnv)>,
    pub ReleaseStatus: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtStatus)>,
    pub ReleaseMemoryInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMemoryInfo)>,
    pub ReleaseSession: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSession)>,
    pub ReleaseValue: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtValue)>,
    pub ReleaseRunOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtRunOptions)>,
    pub ReleaseTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTypeInfo)>,
    pub ReleaseTensorTypeAndShapeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorTypeAndShapeInfo)>,
    pub ReleaseSessionOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSessionOptions)>,
    pub ReleaseCustomOpDomain:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCustomOpDomain)>,
    pub GetDenotationFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            denotation: *mut *const ::std::os::raw::c_char,
            len: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToMapTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtMapTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToSequenceTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtSequenceTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetMapKeyType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetMapValueType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSequenceElementType: ::std::option::Option<
        unsafe extern "C" fn(
            sequence_type_info: *const OrtSequenceTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMapTypeInfo)>,
    pub ReleaseSequenceTypeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSequenceTypeInfo)>,
    pub SessionEndProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            allocator: *mut OrtAllocator,
            out: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetModelMetadata: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            out: *mut *mut OrtModelMetadata,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetProducerName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetGraphName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDomain: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataLookupCustomMetadataMap: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            key: *const ::std::os::raw::c_char,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetVersion: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            value: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseModelMetadata:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtModelMetadata)>,
    pub CreateEnvWithGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub DisablePerSessionThreads: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub CreateThreadingOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub ReleaseThreadingOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtThreadingOptions)>,
    pub ModelMetadataGetCustomMetadataMapKeys: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            keys: *mut *mut *mut ::std::os::raw::c_char,
            num_keys: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub AddFreeDimensionOverrideByName: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_name: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            out_ptr: *mut *mut *mut ::std::os::raw::c_char,
            provider_length: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut *mut ::std::os::raw::c_char,
            providers_length: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorElementLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, index: usize, out: *mut usize) -> OrtStatusPtr,
    >,
    pub GetStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s_len: usize,
            index: usize,
            s: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const ::std::os::raw::c_char,
            index: usize,
        ) -> OrtStatusPtr,
    >,
    pub AddSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            session: *const OrtSession,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAllocator: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtAllocator)>,
    pub RunWithBinding: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut OrtSession,
            run_options: *const OrtRunOptions,
            binding_ptr: *const OrtIoBinding,
        ) -> OrtStatusPtr,
    >,
    pub CreateIoBinding: ::std::option::Option<
        unsafe extern "C" fn(session: *mut OrtSession, out: *mut *mut OrtIoBinding) -> OrtStatusPtr,
    >,
    pub ReleaseIoBinding: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtIoBinding)>,
    pub BindInput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutputToDevice: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            mem_info_ptr: *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputNames: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            buffer: *mut *mut ::std::os::raw::c_char,
            lengths: *mut *mut usize,
            count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputValues: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            output: *mut *mut *mut OrtValue,
            output_count: *mut usize,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Clears any previously set Inputs for an ::OrtIoBinding"]
    pub ClearBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    #[doc = " \\brief Clears any previously set Outputs for an ::OrtIoBinding"]
    pub ClearBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    pub TensorAt: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            location_values: *const i64,
            location_values_count: usize,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub CreateAndRegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub SetLanguageProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *const OrtEnv,
            projection: OrtLanguageProjection,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetProfilingStartTimeNs: ::std::option::Option<
        unsafe extern "C" fn(session: *const OrtSession, out: *mut u64) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalSpinControl: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            allow_spinning: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub AddInitializer: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            name: *const ::std::os::raw::c_char,
            val: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLoggerAndGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            log_severity_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_CUDA: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_ROCM: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            rocm_options: *const OrtROCMProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_OpenVINO: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options: *const OrtOpenVINOProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalDenormalAsZero: ::std::option::Option<
        unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub CreateArenaCfg: ::std::option::Option<
        unsafe extern "C" fn(
            max_mem: usize,
            arena_extend_strategy: ::std::os::raw::c_int,
            initial_chunk_size_bytes: ::std::os::raw::c_int,
            max_dead_bytes_per_chunk: ::std::os::raw::c_int,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseArenaCfg: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtArenaCfg)>,
    pub ModelMetadataGetGraphDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub GetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttributeArray_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
            size: *mut usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateArenaCfgV2: ::std::option::Option<
        unsafe extern "C" fn(
            arena_config_keys: *const *const ::std::os::raw::c_char,
            arena_config_values: *const usize,
            num_keys: usize,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub AddRunConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreatePrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtPrepackedWeightsContainer) -> OrtStatusPtr,
    >,
    pub ReleasePrepackedWeightsContainer:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtPrepackedWeightsContainer)>,
    pub CreateSessionWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const wchar_t,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArrayWithPrepackedWeightsContainer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: usize,
            options: *const OrtSessionOptions,
            prepacked_weights_container: *mut OrtPrepackedWeightsContainer,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorRTProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateTensorRTProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *mut OrtTensorRTProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorRTProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            tensorrt_options: *const OrtTensorRTProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtTensorRTProviderOptionsV2"]
    #[doc = ""]
    #[doc = " \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    pub ReleaseTensorRTProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorRTProviderOptionsV2)>,
    pub EnableOrtCustomOps: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub RegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, allocator: *mut OrtAllocator) -> OrtStatusPtr,
    >,
    pub UnregisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(env: *mut OrtEnv, mem_info: *const OrtMemoryInfo) -> OrtStatusPtr,
    >,
    pub IsSparseTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            dense_shape: *const i64,
            dense_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCoo: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_data: *const i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorCsr: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            inner_indices_data: *const i64,
            inner_indices_num: usize,
            outer_indices_data: *const i64,
            outer_indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub FillSparseTensorBlockSparse: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            data_mem_info: *const OrtMemoryInfo,
            values_shape: *const i64,
            values_shape_len: usize,
            values: *const ::std::os::raw::c_void,
            indices_shape_data: *const i64,
            indices_shape_len: usize,
            indices_data: *const i32,
        ) -> OrtStatusPtr,
    >,
    pub CreateSparseTensorWithValuesAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            dense_shape: *const i64,
            dense_shape_len: usize,
            values_shape: *const i64,
            values_shape_len: usize,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub UseCooIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_data: *mut i64,
            indices_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseCsrIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            inner_data: *mut i64,
            inner_num: usize,
            outer_data: *mut i64,
            outer_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub UseBlockSparseIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *mut OrtValue,
            indices_shape: *const i64,
            indices_shape_len: usize,
            indices_data: *mut i32,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorFormat: ::std::option::Option<
        unsafe extern "C" fn(ort_value: *const OrtValue, out: *mut OrtSparseFormat) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValuesTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorValues: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            out: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndicesTypeShape: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSparseTensorIndices: ::std::option::Option<
        unsafe extern "C" fn(
            ort_value: *const OrtValue,
            indices_format: OrtSparseIndicesFormat,
            num_indices: *mut usize,
            indices: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub HasValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetGPUComputeStream: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            mem_info: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetExecutionProviderApi: ::std::option::Option<
        unsafe extern "C" fn(
            provider_name: *const ::std::os::raw::c_char,
            version: u32,
            provider_api: *mut *const ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsSetCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomCreateThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_create_thread_fn: OrtCustomCreateThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomThreadCreationOptions: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_thread_creation_options: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalCustomJoinThreadFn: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            ort_custom_join_thread_fn: OrtCustomJoinThreadFn,
        ) -> OrtStatusPtr,
    >,
    pub SynchronizeBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SynchronizeBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding) -> OrtStatusPtr>,
    pub SessionOptionsAppendExecutionProvider_CUDA_V2: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptionsV2,
        ) -> OrtStatusPtr,
    >,
    pub CreateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtCUDAProviderOptionsV2) -> OrtStatusPtr,
    >,
    pub UpdateCUDAProviderOptions: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *mut OrtCUDAProviderOptionsV2,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub GetCUDAProviderOptionsAsString: ::std::option::Option<
        unsafe extern "C" fn(
            cuda_options: *const OrtCUDAProviderOptionsV2,
            allocator: *mut OrtAllocator,
            ptr: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    #[doc = " \\brief Release an ::OrtCUDAProviderOptionsV2"]
    #[doc = ""]
    #[doc = " \\note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does"]
    #[doc = ""]
    #[doc = " \\since Version 1.11."]
    pub ReleaseCUDAProviderOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCUDAProviderOptionsV2)>,
    pub SessionOptionsAppendExecutionProvider_MIGraphX: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            migraphx_options: *const OrtMIGraphXProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub AddExternalInitializers: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            initializer_names: *const *const ::std::os::raw::c_char,
            initializers: *const *const OrtValue,
            initializers_num: usize,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpAttr: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            data: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            type_: OrtOpAttrType,
            op_attr: *mut *mut OrtOpAttr,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOpAttr: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOpAttr)>,
    pub CreateOp: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            op_name: *const ::std::os::raw::c_char,
            domain: *const ::std::os::raw::c_char,
            version: ::std::os::raw::c_int,
            type_constraint_names: *mut *const ::std::os::raw::c_char,
            type_constraint_values: *const ONNXTensorElementDataType,
            type_constraint_count: ::std::os::raw::c_int,
            attr_values: *const *const OrtOpAttr,
            attr_count: ::std::os::raw::c_int,
            input_count: ::std::os::raw::c_int,
            output_count: ::std::os::raw::c_int,
            ort_op: *mut *mut OrtOp,
        ) -> OrtStatusPtr,
    >,
    pub InvokeOp: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            ort_op: *const OrtOp,
            input_values: *const *const OrtValue,
            input_count: ::std::os::raw::c_int,
            output_values: *const *mut OrtValue,
            output_count: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseOp: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtOp)>,
    pub SessionOptionsAppendExecutionProvider: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_name: *const ::std::os::raw::c_char,
            provider_options_keys: *const *const ::std::os::raw::c_char,
            provider_options_values: *const *const ::std::os::raw::c_char,
            num_keys: usize,
        ) -> OrtStatusPtr,
    >,
    pub CopyKernelInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            info_copy: *mut *mut OrtKernelInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseKernelInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtKernelInfo)>,
}
#[test]
fn bindgen_test_layout_OrtApi() {
    assert_eq!(
        ::std::mem::size_of::<OrtApi>(),
        1752usize,
        concat!("Size of: ", stringify!(OrtApi))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApi>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApi))
    );
    fn test_field_CreateStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateStatus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateStatus)
            )
        );
    }
    test_field_CreateStatus();
    fn test_field_GetErrorCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetErrorCode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetErrorCode)
            )
        );
    }
    test_field_GetErrorCode();
    fn test_field_GetErrorMessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetErrorMessage) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetErrorMessage)
            )
        );
    }
    test_field_GetErrorMessage();
    fn test_field_CreateEnv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnv) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnv)
            )
        );
    }
    test_field_CreateEnv();
    fn test_field_CreateEnvWithCustomLogger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLogger) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithCustomLogger)
            )
        );
    }
    test_field_CreateEnvWithCustomLogger();
    fn test_field_EnableTelemetryEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableTelemetryEvents) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableTelemetryEvents)
            )
        );
    }
    test_field_EnableTelemetryEvents();
    fn test_field_DisableTelemetryEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableTelemetryEvents) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableTelemetryEvents)
            )
        );
    }
    test_field_DisableTelemetryEvents();
    fn test_field_CreateSession() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSession) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSession)
            )
        );
    }
    test_field_CreateSession();
    fn test_field_CreateSessionFromArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionFromArray) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionFromArray)
            )
        );
    }
    test_field_CreateSessionFromArray();
    fn test_field_Run() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Run) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(Run)
            )
        );
    }
    test_field_Run();
    fn test_field_CreateSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionOptions) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionOptions)
            )
        );
    }
    test_field_CreateSessionOptions();
    fn test_field_SetOptimizedModelFilePath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOptimizedModelFilePath) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetOptimizedModelFilePath)
            )
        );
    }
    test_field_SetOptimizedModelFilePath();
    fn test_field_CloneSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CloneSessionOptions) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CloneSessionOptions)
            )
        );
    }
    test_field_CloneSessionOptions();
    fn test_field_SetSessionExecutionMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionExecutionMode) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionExecutionMode)
            )
        );
    }
    test_field_SetSessionExecutionMode();
    fn test_field_EnableProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableProfiling) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableProfiling)
            )
        );
    }
    test_field_EnableProfiling();
    fn test_field_DisableProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableProfiling) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableProfiling)
            )
        );
    }
    test_field_DisableProfiling();
    fn test_field_EnableMemPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableMemPattern) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableMemPattern)
            )
        );
    }
    test_field_EnableMemPattern();
    fn test_field_DisableMemPattern() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableMemPattern) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableMemPattern)
            )
        );
    }
    test_field_DisableMemPattern();
    fn test_field_EnableCpuMemArena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableCpuMemArena) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableCpuMemArena)
            )
        );
    }
    test_field_EnableCpuMemArena();
    fn test_field_DisableCpuMemArena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableCpuMemArena) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisableCpuMemArena)
            )
        );
    }
    test_field_DisableCpuMemArena();
    fn test_field_SetSessionLogId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogId) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogId)
            )
        );
    }
    test_field_SetSessionLogId();
    fn test_field_SetSessionLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogVerbosityLevel) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogVerbosityLevel)
            )
        );
    }
    test_field_SetSessionLogVerbosityLevel();
    fn test_field_SetSessionLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionLogSeverityLevel) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionLogSeverityLevel)
            )
        );
    }
    test_field_SetSessionLogSeverityLevel();
    fn test_field_SetSessionGraphOptimizationLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSessionGraphOptimizationLevel) as usize
                    - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetSessionGraphOptimizationLevel)
            )
        );
    }
    test_field_SetSessionGraphOptimizationLevel();
    fn test_field_SetIntraOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetIntraOpNumThreads) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetIntraOpNumThreads)
            )
        );
    }
    test_field_SetIntraOpNumThreads();
    fn test_field_SetInterOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetInterOpNumThreads) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetInterOpNumThreads)
            )
        );
    }
    test_field_SetInterOpNumThreads();
    fn test_field_CreateCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCustomOpDomain) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCustomOpDomain)
            )
        );
    }
    test_field_CreateCustomOpDomain();
    fn test_field_CustomOpDomain_Add() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CustomOpDomain_Add) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CustomOpDomain_Add)
            )
        );
    }
    test_field_CustomOpDomain_Add();
    fn test_field_AddCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddCustomOpDomain) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddCustomOpDomain)
            )
        );
    }
    test_field_AddCustomOpDomain();
    fn test_field_RegisterCustomOpsLibrary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterCustomOpsLibrary) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterCustomOpsLibrary)
            )
        );
    }
    test_field_RegisterCustomOpsLibrary();
    fn test_field_SessionGetInputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputCount) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputCount)
            )
        );
    }
    test_field_SessionGetInputCount();
    fn test_field_SessionGetOutputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputCount) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputCount)
            )
        );
    }
    test_field_SessionGetOutputCount();
    fn test_field_SessionGetOverridableInitializerCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerCount) as usize
                    - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerCount)
            )
        );
    }
    test_field_SessionGetOverridableInitializerCount();
    fn test_field_SessionGetInputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputTypeInfo) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputTypeInfo)
            )
        );
    }
    test_field_SessionGetInputTypeInfo();
    fn test_field_SessionGetOutputTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputTypeInfo) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputTypeInfo)
            )
        );
    }
    test_field_SessionGetOutputTypeInfo();
    fn test_field_SessionGetOverridableInitializerTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerTypeInfo) as usize
                    - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerTypeInfo)
            )
        );
    }
    test_field_SessionGetOverridableInitializerTypeInfo();
    fn test_field_SessionGetInputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetInputName) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetInputName)
            )
        );
    }
    test_field_SessionGetInputName();
    fn test_field_SessionGetOutputName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOutputName) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOutputName)
            )
        );
    }
    test_field_SessionGetOutputName();
    fn test_field_SessionGetOverridableInitializerName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetOverridableInitializerName) as usize
                    - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetOverridableInitializerName)
            )
        );
    }
    test_field_SessionGetOverridableInitializerName();
    fn test_field_CreateRunOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateRunOptions) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateRunOptions)
            )
        );
    }
    test_field_CreateRunOptions();
    fn test_field_RunOptionsSetRunLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogVerbosityLevel) as usize
                    - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunLogVerbosityLevel)
            )
        );
    }
    test_field_RunOptionsSetRunLogVerbosityLevel();
    fn test_field_RunOptionsSetRunLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunLogSeverityLevel) as usize
                    - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunLogSeverityLevel)
            )
        );
    }
    test_field_RunOptionsSetRunLogSeverityLevel();
    fn test_field_RunOptionsSetRunTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetRunTag) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetRunTag)
            )
        );
    }
    test_field_RunOptionsSetRunTag();
    fn test_field_RunOptionsGetRunLogVerbosityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogVerbosityLevel) as usize
                    - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunLogVerbosityLevel)
            )
        );
    }
    test_field_RunOptionsGetRunLogVerbosityLevel();
    fn test_field_RunOptionsGetRunLogSeverityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunLogSeverityLevel) as usize
                    - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunLogSeverityLevel)
            )
        );
    }
    test_field_RunOptionsGetRunLogSeverityLevel();
    fn test_field_RunOptionsGetRunTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsGetRunTag) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsGetRunTag)
            )
        );
    }
    test_field_RunOptionsGetRunTag();
    fn test_field_RunOptionsSetTerminate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsSetTerminate) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsSetTerminate)
            )
        );
    }
    test_field_RunOptionsSetTerminate();
    fn test_field_RunOptionsUnsetTerminate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunOptionsUnsetTerminate) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunOptionsUnsetTerminate)
            )
        );
    }
    test_field_RunOptionsUnsetTerminate();
    fn test_field_CreateTensorAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorAsOrtValue) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorAsOrtValue)
            )
        );
    }
    test_field_CreateTensorAsOrtValue();
    fn test_field_CreateTensorWithDataAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorWithDataAsOrtValue) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorWithDataAsOrtValue)
            )
        );
    }
    test_field_CreateTensorWithDataAsOrtValue();
    fn test_field_IsTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsTensor) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(IsTensor)
            )
        );
    }
    test_field_IsTensor();
    fn test_field_GetTensorMutableData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorMutableData) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorMutableData)
            )
        );
    }
    test_field_GetTensorMutableData();
    fn test_field_FillStringTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillStringTensor) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillStringTensor)
            )
        );
    }
    test_field_FillStringTensor();
    fn test_field_GetStringTensorDataLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorDataLength) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorDataLength)
            )
        );
    }
    test_field_GetStringTensorDataLength();
    fn test_field_GetStringTensorContent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorContent) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorContent)
            )
        );
    }
    test_field_GetStringTensorContent();
    fn test_field_CastTypeInfoToTensorInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToTensorInfo) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToTensorInfo)
            )
        );
    }
    test_field_CastTypeInfoToTensorInfo();
    fn test_field_GetOnnxTypeFromTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOnnxTypeFromTypeInfo) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetOnnxTypeFromTypeInfo)
            )
        );
    }
    test_field_GetOnnxTypeFromTypeInfo();
    fn test_field_CreateTensorTypeAndShapeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorTypeAndShapeInfo) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorTypeAndShapeInfo)
            )
        );
    }
    test_field_CreateTensorTypeAndShapeInfo();
    fn test_field_SetTensorElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetTensorElementType) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetTensorElementType)
            )
        );
    }
    test_field_SetTensorElementType();
    fn test_field_SetDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDimensions) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetDimensions)
            )
        );
    }
    test_field_SetDimensions();
    fn test_field_GetTensorElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorElementType) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorElementType)
            )
        );
    }
    test_field_GetTensorElementType();
    fn test_field_GetDimensionsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDimensionsCount) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDimensionsCount)
            )
        );
    }
    test_field_GetDimensionsCount();
    fn test_field_GetDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDimensions) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDimensions)
            )
        );
    }
    test_field_GetDimensions();
    fn test_field_GetSymbolicDimensions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSymbolicDimensions) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSymbolicDimensions)
            )
        );
    }
    test_field_GetSymbolicDimensions();
    fn test_field_GetTensorShapeElementCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorShapeElementCount) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorShapeElementCount)
            )
        );
    }
    test_field_GetTensorShapeElementCount();
    fn test_field_GetTensorTypeAndShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorTypeAndShape) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorTypeAndShape)
            )
        );
    }
    test_field_GetTensorTypeAndShape();
    fn test_field_GetTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTypeInfo) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTypeInfo)
            )
        );
    }
    test_field_GetTypeInfo();
    fn test_field_GetValueType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValueType) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValueType)
            )
        );
    }
    test_field_GetValueType();
    fn test_field_CreateMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateMemoryInfo) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateMemoryInfo)
            )
        );
    }
    test_field_CreateMemoryInfo();
    fn test_field_CreateCpuMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCpuMemoryInfo) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCpuMemoryInfo)
            )
        );
    }
    test_field_CreateCpuMemoryInfo();
    fn test_field_CompareMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompareMemoryInfo) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CompareMemoryInfo)
            )
        );
    }
    test_field_CompareMemoryInfo();
    fn test_field_MemoryInfoGetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetName) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetName)
            )
        );
    }
    test_field_MemoryInfoGetName();
    fn test_field_MemoryInfoGetId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetId) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetId)
            )
        );
    }
    test_field_MemoryInfoGetId();
    fn test_field_MemoryInfoGetMemType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetMemType) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetMemType)
            )
        );
    }
    test_field_MemoryInfoGetMemType();
    fn test_field_MemoryInfoGetType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryInfoGetType) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(MemoryInfoGetType)
            )
        );
    }
    test_field_MemoryInfoGetType();
    fn test_field_AllocatorAlloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorAlloc) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorAlloc)
            )
        );
    }
    test_field_AllocatorAlloc();
    fn test_field_AllocatorFree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorFree) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorFree)
            )
        );
    }
    test_field_AllocatorFree();
    fn test_field_AllocatorGetInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatorGetInfo) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AllocatorGetInfo)
            )
        );
    }
    test_field_AllocatorGetInfo();
    fn test_field_GetAllocatorWithDefaultOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAllocatorWithDefaultOptions) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetAllocatorWithDefaultOptions)
            )
        );
    }
    test_field_GetAllocatorWithDefaultOptions();
    fn test_field_AddFreeDimensionOverride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverride) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddFreeDimensionOverride)
            )
        );
    }
    test_field_AddFreeDimensionOverride();
    fn test_field_GetValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValue) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValue)
            )
        );
    }
    test_field_GetValue();
    fn test_field_GetValueCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetValueCount) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetValueCount)
            )
        );
    }
    test_field_GetValueCount();
    fn test_field_CreateValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateValue) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateValue)
            )
        );
    }
    test_field_CreateValue();
    fn test_field_CreateOpaqueValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOpaqueValue) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOpaqueValue)
            )
        );
    }
    test_field_CreateOpaqueValue();
    fn test_field_GetOpaqueValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOpaqueValue) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetOpaqueValue)
            )
        );
    }
    test_field_GetOpaqueValue();
    fn test_field_KernelInfoGetAttribute_float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_float) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_float)
            )
        );
    }
    test_field_KernelInfoGetAttribute_float();
    fn test_field_KernelInfoGetAttribute_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_int64) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_int64)
            )
        );
    }
    test_field_KernelInfoGetAttribute_int64();
    fn test_field_KernelInfoGetAttribute_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttribute_string) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttribute_string)
            )
        );
    }
    test_field_KernelInfoGetAttribute_string();
    fn test_field_KernelContext_GetInputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetInputCount) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetInputCount)
            )
        );
    }
    test_field_KernelContext_GetInputCount();
    fn test_field_KernelContext_GetOutputCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetOutputCount) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetOutputCount)
            )
        );
    }
    test_field_KernelContext_GetOutputCount();
    fn test_field_KernelContext_GetInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetInput) as usize - ptr as usize
            },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetInput)
            )
        );
    }
    test_field_KernelContext_GetInput();
    fn test_field_KernelContext_GetOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetOutput) as usize - ptr as usize
            },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetOutput)
            )
        );
    }
    test_field_KernelContext_GetOutput();
    fn test_field_ReleaseEnv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseEnv) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseEnv)
            )
        );
    }
    test_field_ReleaseEnv();
    fn test_field_ReleaseStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseStatus) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseStatus)
            )
        );
    }
    test_field_ReleaseStatus();
    fn test_field_ReleaseMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseMemoryInfo) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseMemoryInfo)
            )
        );
    }
    test_field_ReleaseMemoryInfo();
    fn test_field_ReleaseSession() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSession) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSession)
            )
        );
    }
    test_field_ReleaseSession();
    fn test_field_ReleaseValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseValue) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseValue)
            )
        );
    }
    test_field_ReleaseValue();
    fn test_field_ReleaseRunOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseRunOptions) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseRunOptions)
            )
        );
    }
    test_field_ReleaseRunOptions();
    fn test_field_ReleaseTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTypeInfo) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTypeInfo)
            )
        );
    }
    test_field_ReleaseTypeInfo();
    fn test_field_ReleaseTensorTypeAndShapeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTensorTypeAndShapeInfo) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTensorTypeAndShapeInfo)
            )
        );
    }
    test_field_ReleaseTensorTypeAndShapeInfo();
    fn test_field_ReleaseSessionOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSessionOptions) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSessionOptions)
            )
        );
    }
    test_field_ReleaseSessionOptions();
    fn test_field_ReleaseCustomOpDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCustomOpDomain) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseCustomOpDomain)
            )
        );
    }
    test_field_ReleaseCustomOpDomain();
    fn test_field_GetDenotationFromTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDenotationFromTypeInfo) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetDenotationFromTypeInfo)
            )
        );
    }
    test_field_GetDenotationFromTypeInfo();
    fn test_field_CastTypeInfoToMapTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToMapTypeInfo) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToMapTypeInfo)
            )
        );
    }
    test_field_CastTypeInfoToMapTypeInfo();
    fn test_field_CastTypeInfoToSequenceTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CastTypeInfoToSequenceTypeInfo) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CastTypeInfoToSequenceTypeInfo)
            )
        );
    }
    test_field_CastTypeInfoToSequenceTypeInfo();
    fn test_field_GetMapKeyType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMapKeyType) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetMapKeyType)
            )
        );
    }
    test_field_GetMapKeyType();
    fn test_field_GetMapValueType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMapValueType) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetMapValueType)
            )
        );
    }
    test_field_GetMapValueType();
    fn test_field_GetSequenceElementType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSequenceElementType) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSequenceElementType)
            )
        );
    }
    test_field_GetSequenceElementType();
    fn test_field_ReleaseMapTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseMapTypeInfo) as usize - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseMapTypeInfo)
            )
        );
    }
    test_field_ReleaseMapTypeInfo();
    fn test_field_ReleaseSequenceTypeInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSequenceTypeInfo) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseSequenceTypeInfo)
            )
        );
    }
    test_field_ReleaseSequenceTypeInfo();
    fn test_field_SessionEndProfiling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionEndProfiling) as usize - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionEndProfiling)
            )
        );
    }
    test_field_SessionEndProfiling();
    fn test_field_SessionGetModelMetadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetModelMetadata) as usize - ptr as usize
            },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetModelMetadata)
            )
        );
    }
    test_field_SessionGetModelMetadata();
    fn test_field_ModelMetadataGetProducerName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetProducerName) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetProducerName)
            )
        );
    }
    test_field_ModelMetadataGetProducerName();
    fn test_field_ModelMetadataGetGraphName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphName) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetGraphName)
            )
        );
    }
    test_field_ModelMetadataGetGraphName();
    fn test_field_ModelMetadataGetDomain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetDomain) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetDomain)
            )
        );
    }
    test_field_ModelMetadataGetDomain();
    fn test_field_ModelMetadataGetDescription() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetDescription) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetDescription)
            )
        );
    }
    test_field_ModelMetadataGetDescription();
    fn test_field_ModelMetadataLookupCustomMetadataMap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataLookupCustomMetadataMap) as usize
                    - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataLookupCustomMetadataMap)
            )
        );
    }
    test_field_ModelMetadataLookupCustomMetadataMap();
    fn test_field_ModelMetadataGetVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetVersion) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetVersion)
            )
        );
    }
    test_field_ModelMetadataGetVersion();
    fn test_field_ReleaseModelMetadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseModelMetadata) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseModelMetadata)
            )
        );
    }
    test_field_ReleaseModelMetadata();
    fn test_field_CreateEnvWithGlobalThreadPools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithGlobalThreadPools) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithGlobalThreadPools)
            )
        );
    }
    test_field_CreateEnvWithGlobalThreadPools();
    fn test_field_DisablePerSessionThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisablePerSessionThreads) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(DisablePerSessionThreads)
            )
        );
    }
    test_field_DisablePerSessionThreads();
    fn test_field_CreateThreadingOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateThreadingOptions) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateThreadingOptions)
            )
        );
    }
    test_field_CreateThreadingOptions();
    fn test_field_ReleaseThreadingOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseThreadingOptions) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseThreadingOptions)
            )
        );
    }
    test_field_ReleaseThreadingOptions();
    fn test_field_ModelMetadataGetCustomMetadataMapKeys() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetCustomMetadataMapKeys) as usize
                    - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetCustomMetadataMapKeys)
            )
        );
    }
    test_field_ModelMetadataGetCustomMetadataMapKeys();
    fn test_field_AddFreeDimensionOverrideByName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddFreeDimensionOverrideByName) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddFreeDimensionOverrideByName)
            )
        );
    }
    test_field_AddFreeDimensionOverrideByName();
    fn test_field_GetAvailableProviders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAvailableProviders) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetAvailableProviders)
            )
        );
    }
    test_field_GetAvailableProviders();
    fn test_field_ReleaseAvailableProviders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseAvailableProviders) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseAvailableProviders)
            )
        );
    }
    test_field_ReleaseAvailableProviders();
    fn test_field_GetStringTensorElementLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorElementLength) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorElementLength)
            )
        );
    }
    test_field_GetStringTensorElementLength();
    fn test_field_GetStringTensorElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTensorElement) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetStringTensorElement)
            )
        );
    }
    test_field_GetStringTensorElement();
    fn test_field_FillStringTensorElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillStringTensorElement) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillStringTensorElement)
            )
        );
    }
    test_field_FillStringTensorElement();
    fn test_field_AddSessionConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddSessionConfigEntry) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddSessionConfigEntry)
            )
        );
    }
    test_field_AddSessionConfigEntry();
    fn test_field_CreateAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateAllocator) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateAllocator)
            )
        );
    }
    test_field_CreateAllocator();
    fn test_field_ReleaseAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseAllocator) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseAllocator)
            )
        );
    }
    test_field_ReleaseAllocator();
    fn test_field_RunWithBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunWithBinding) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RunWithBinding)
            )
        );
    }
    test_field_RunWithBinding();
    fn test_field_CreateIoBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateIoBinding) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateIoBinding)
            )
        );
    }
    test_field_CreateIoBinding();
    fn test_field_ReleaseIoBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseIoBinding) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseIoBinding)
            )
        );
    }
    test_field_ReleaseIoBinding();
    fn test_field_BindInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindInput) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindInput)
            )
        );
    }
    test_field_BindInput();
    fn test_field_BindOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindOutput) as usize - ptr as usize
            },
            1096usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindOutput)
            )
        );
    }
    test_field_BindOutput();
    fn test_field_BindOutputToDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BindOutputToDevice) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(BindOutputToDevice)
            )
        );
    }
    test_field_BindOutputToDevice();
    fn test_field_GetBoundOutputNames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoundOutputNames) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetBoundOutputNames)
            )
        );
    }
    test_field_GetBoundOutputNames();
    fn test_field_GetBoundOutputValues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoundOutputValues) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetBoundOutputValues)
            )
        );
    }
    test_field_GetBoundOutputValues();
    fn test_field_ClearBoundInputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearBoundInputs) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ClearBoundInputs)
            )
        );
    }
    test_field_ClearBoundInputs();
    fn test_field_ClearBoundOutputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearBoundOutputs) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ClearBoundOutputs)
            )
        );
    }
    test_field_ClearBoundOutputs();
    fn test_field_TensorAt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TensorAt) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(TensorAt)
            )
        );
    }
    test_field_TensorAt();
    fn test_field_CreateAndRegisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateAndRegisterAllocator) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateAndRegisterAllocator)
            )
        );
    }
    test_field_CreateAndRegisterAllocator();
    fn test_field_SetLanguageProjection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLanguageProjection) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetLanguageProjection)
            )
        );
    }
    test_field_SetLanguageProjection();
    fn test_field_SessionGetProfilingStartTimeNs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionGetProfilingStartTimeNs) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionGetProfilingStartTimeNs)
            )
        );
    }
    test_field_SessionGetProfilingStartTimeNs();
    fn test_field_SetGlobalIntraOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalIntraOpNumThreads) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalIntraOpNumThreads)
            )
        );
    }
    test_field_SetGlobalIntraOpNumThreads();
    fn test_field_SetGlobalInterOpNumThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalInterOpNumThreads) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalInterOpNumThreads)
            )
        );
    }
    test_field_SetGlobalInterOpNumThreads();
    fn test_field_SetGlobalSpinControl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalSpinControl) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalSpinControl)
            )
        );
    }
    test_field_SetGlobalSpinControl();
    fn test_field_AddInitializer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddInitializer) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddInitializer)
            )
        );
    }
    test_field_AddInitializer();
    fn test_field_CreateEnvWithCustomLoggerAndGlobalThreadPools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateEnvWithCustomLoggerAndGlobalThreadPools) as usize
                    - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateEnvWithCustomLoggerAndGlobalThreadPools)
            )
        );
    }
    test_field_CreateEnvWithCustomLoggerAndGlobalThreadPools();
    fn test_field_SessionOptionsAppendExecutionProvider_CUDA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA) as usize
                    - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_CUDA)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_CUDA();
    fn test_field_SessionOptionsAppendExecutionProvider_ROCM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_ROCM) as usize
                    - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_ROCM)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_ROCM();
    fn test_field_SessionOptionsAppendExecutionProvider_OpenVINO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_OpenVINO) as usize
                    - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_OpenVINO)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_OpenVINO();
    fn test_field_SetGlobalDenormalAsZero() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalDenormalAsZero) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalDenormalAsZero)
            )
        );
    }
    test_field_SetGlobalDenormalAsZero();
    fn test_field_CreateArenaCfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateArenaCfg) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateArenaCfg)
            )
        );
    }
    test_field_CreateArenaCfg();
    fn test_field_ReleaseArenaCfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseArenaCfg) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseArenaCfg)
            )
        );
    }
    test_field_ReleaseArenaCfg();
    fn test_field_ModelMetadataGetGraphDescription() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ModelMetadataGetGraphDescription) as usize
                    - ptr as usize
            },
            1264usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ModelMetadataGetGraphDescription)
            )
        );
    }
    test_field_ModelMetadataGetGraphDescription();
    fn test_field_SessionOptionsAppendExecutionProvider_TensorRT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT) as usize
                    - ptr as usize
            },
            1272usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_TensorRT)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_TensorRT();
    fn test_field_SetCurrentGpuDeviceId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetCurrentGpuDeviceId) as usize - ptr as usize
            },
            1280usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetCurrentGpuDeviceId)
            )
        );
    }
    test_field_SetCurrentGpuDeviceId();
    fn test_field_GetCurrentGpuDeviceId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentGpuDeviceId) as usize - ptr as usize
            },
            1288usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCurrentGpuDeviceId)
            )
        );
    }
    test_field_GetCurrentGpuDeviceId();
    fn test_field_KernelInfoGetAttributeArray_float() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_float) as usize
                    - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttributeArray_float)
            )
        );
    }
    test_field_KernelInfoGetAttributeArray_float();
    fn test_field_KernelInfoGetAttributeArray_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelInfoGetAttributeArray_int64) as usize
                    - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelInfoGetAttributeArray_int64)
            )
        );
    }
    test_field_KernelInfoGetAttributeArray_int64();
    fn test_field_CreateArenaCfgV2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateArenaCfgV2) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateArenaCfgV2)
            )
        );
    }
    test_field_CreateArenaCfgV2();
    fn test_field_AddRunConfigEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddRunConfigEntry) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddRunConfigEntry)
            )
        );
    }
    test_field_AddRunConfigEntry();
    fn test_field_CreatePrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreatePrepackedWeightsContainer) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreatePrepackedWeightsContainer)
            )
        );
    }
    test_field_CreatePrepackedWeightsContainer();
    fn test_field_ReleasePrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleasePrepackedWeightsContainer) as usize
                    - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleasePrepackedWeightsContainer)
            )
        );
    }
    test_field_ReleasePrepackedWeightsContainer();
    fn test_field_CreateSessionWithPrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionWithPrepackedWeightsContainer) as usize
                    - ptr as usize
            },
            1344usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionWithPrepackedWeightsContainer)
            )
        );
    }
    test_field_CreateSessionWithPrepackedWeightsContainer();
    fn test_field_CreateSessionFromArrayWithPrepackedWeightsContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSessionFromArrayWithPrepackedWeightsContainer)
                    as usize
                    - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSessionFromArrayWithPrepackedWeightsContainer)
            )
        );
    }
    test_field_CreateSessionFromArrayWithPrepackedWeightsContainer();
    fn test_field_SessionOptionsAppendExecutionProvider_TensorRT_V2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_TensorRT_V2)
                    as usize
                    - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_TensorRT_V2)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_TensorRT_V2();
    fn test_field_CreateTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateTensorRTProviderOptions) as usize - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateTensorRTProviderOptions)
            )
        );
    }
    test_field_CreateTensorRTProviderOptions();
    fn test_field_UpdateTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateTensorRTProviderOptions) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateTensorRTProviderOptions)
            )
        );
    }
    test_field_UpdateTensorRTProviderOptions();
    fn test_field_GetTensorRTProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorRTProviderOptionsAsString) as usize
                    - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorRTProviderOptionsAsString)
            )
        );
    }
    test_field_GetTensorRTProviderOptionsAsString();
    fn test_field_ReleaseTensorRTProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseTensorRTProviderOptions) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseTensorRTProviderOptions)
            )
        );
    }
    test_field_ReleaseTensorRTProviderOptions();
    fn test_field_EnableOrtCustomOps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnableOrtCustomOps) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(EnableOrtCustomOps)
            )
        );
    }
    test_field_EnableOrtCustomOps();
    fn test_field_RegisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterAllocator) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(RegisterAllocator)
            )
        );
    }
    test_field_RegisterAllocator();
    fn test_field_UnregisterAllocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UnregisterAllocator) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UnregisterAllocator)
            )
        );
    }
    test_field_UnregisterAllocator();
    fn test_field_IsSparseTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSparseTensor) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(IsSparseTensor)
            )
        );
    }
    test_field_IsSparseTensor();
    fn test_field_CreateSparseTensorAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSparseTensorAsOrtValue) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSparseTensorAsOrtValue)
            )
        );
    }
    test_field_CreateSparseTensorAsOrtValue();
    fn test_field_FillSparseTensorCoo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorCoo) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorCoo)
            )
        );
    }
    test_field_FillSparseTensorCoo();
    fn test_field_FillSparseTensorCsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorCsr) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorCsr)
            )
        );
    }
    test_field_FillSparseTensorCsr();
    fn test_field_FillSparseTensorBlockSparse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FillSparseTensorBlockSparse) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(FillSparseTensorBlockSparse)
            )
        );
    }
    test_field_FillSparseTensorBlockSparse();
    fn test_field_CreateSparseTensorWithValuesAsOrtValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSparseTensorWithValuesAsOrtValue) as usize
                    - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateSparseTensorWithValuesAsOrtValue)
            )
        );
    }
    test_field_CreateSparseTensorWithValuesAsOrtValue();
    fn test_field_UseCooIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseCooIndices) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseCooIndices)
            )
        );
    }
    test_field_UseCooIndices();
    fn test_field_UseCsrIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseCsrIndices) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseCsrIndices)
            )
        );
    }
    test_field_UseCsrIndices();
    fn test_field_UseBlockSparseIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UseBlockSparseIndices) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UseBlockSparseIndices)
            )
        );
    }
    test_field_UseBlockSparseIndices();
    fn test_field_GetSparseTensorFormat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorFormat) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorFormat)
            )
        );
    }
    test_field_GetSparseTensorFormat();
    fn test_field_GetSparseTensorValuesTypeAndShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorValuesTypeAndShape) as usize
                    - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorValuesTypeAndShape)
            )
        );
    }
    test_field_GetSparseTensorValuesTypeAndShape();
    fn test_field_GetSparseTensorValues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorValues) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorValues)
            )
        );
    }
    test_field_GetSparseTensorValues();
    fn test_field_GetSparseTensorIndicesTypeShape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorIndicesTypeShape) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorIndicesTypeShape)
            )
        );
    }
    test_field_GetSparseTensorIndicesTypeShape();
    fn test_field_GetSparseTensorIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSparseTensorIndices) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetSparseTensorIndices)
            )
        );
    }
    test_field_GetSparseTensorIndices();
    fn test_field_HasValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasValue) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(HasValue)
            )
        );
    }
    test_field_HasValue();
    fn test_field_KernelContext_GetGPUComputeStream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelContext_GetGPUComputeStream) as usize
                    - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(KernelContext_GetGPUComputeStream)
            )
        );
    }
    test_field_KernelContext_GetGPUComputeStream();
    fn test_field_GetTensorMemoryInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensorMemoryInfo) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetTensorMemoryInfo)
            )
        );
    }
    test_field_GetTensorMemoryInfo();
    fn test_field_GetExecutionProviderApi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExecutionProviderApi) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetExecutionProviderApi)
            )
        );
    }
    test_field_GetExecutionProviderApi();
    fn test_field_SessionOptionsSetCustomCreateThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomCreateThreadFn) as usize
                    - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomCreateThreadFn)
            )
        );
    }
    test_field_SessionOptionsSetCustomCreateThreadFn();
    fn test_field_SessionOptionsSetCustomThreadCreationOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomThreadCreationOptions) as usize
                    - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomThreadCreationOptions)
            )
        );
    }
    test_field_SessionOptionsSetCustomThreadCreationOptions();
    fn test_field_SessionOptionsSetCustomJoinThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsSetCustomJoinThreadFn) as usize
                    - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsSetCustomJoinThreadFn)
            )
        );
    }
    test_field_SessionOptionsSetCustomJoinThreadFn();
    fn test_field_SetGlobalCustomCreateThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomCreateThreadFn) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomCreateThreadFn)
            )
        );
    }
    test_field_SetGlobalCustomCreateThreadFn();
    fn test_field_SetGlobalCustomThreadCreationOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomThreadCreationOptions) as usize
                    - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomThreadCreationOptions)
            )
        );
    }
    test_field_SetGlobalCustomThreadCreationOptions();
    fn test_field_SetGlobalCustomJoinThreadFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGlobalCustomJoinThreadFn) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SetGlobalCustomJoinThreadFn)
            )
        );
    }
    test_field_SetGlobalCustomJoinThreadFn();
    fn test_field_SynchronizeBoundInputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SynchronizeBoundInputs) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SynchronizeBoundInputs)
            )
        );
    }
    test_field_SynchronizeBoundInputs();
    fn test_field_SynchronizeBoundOutputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SynchronizeBoundOutputs) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SynchronizeBoundOutputs)
            )
        );
    }
    test_field_SynchronizeBoundOutputs();
    fn test_field_SessionOptionsAppendExecutionProvider_CUDA_V2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_CUDA_V2) as usize
                    - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_CUDA_V2)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_CUDA_V2();
    fn test_field_CreateCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateCUDAProviderOptions) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateCUDAProviderOptions)
            )
        );
    }
    test_field_CreateCUDAProviderOptions();
    fn test_field_UpdateCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateCUDAProviderOptions) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(UpdateCUDAProviderOptions)
            )
        );
    }
    test_field_UpdateCUDAProviderOptions();
    fn test_field_GetCUDAProviderOptionsAsString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCUDAProviderOptionsAsString) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(GetCUDAProviderOptionsAsString)
            )
        );
    }
    test_field_GetCUDAProviderOptionsAsString();
    fn test_field_ReleaseCUDAProviderOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCUDAProviderOptions) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseCUDAProviderOptions)
            )
        );
    }
    test_field_ReleaseCUDAProviderOptions();
    fn test_field_SessionOptionsAppendExecutionProvider_MIGraphX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider_MIGraphX) as usize
                    - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider_MIGraphX)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider_MIGraphX();
    fn test_field_AddExternalInitializers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddExternalInitializers) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(AddExternalInitializers)
            )
        );
    }
    test_field_AddExternalInitializers();
    fn test_field_CreateOpAttr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOpAttr) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOpAttr)
            )
        );
    }
    test_field_CreateOpAttr();
    fn test_field_ReleaseOpAttr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseOpAttr) as usize - ptr as usize
            },
            1696usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseOpAttr)
            )
        );
    }
    test_field_ReleaseOpAttr();
    fn test_field_CreateOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOp) as usize - ptr as usize
            },
            1704usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CreateOp)
            )
        );
    }
    test_field_CreateOp();
    fn test_field_InvokeOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InvokeOp) as usize - ptr as usize
            },
            1712usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(InvokeOp)
            )
        );
    }
    test_field_InvokeOp();
    fn test_field_ReleaseOp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseOp) as usize - ptr as usize
            },
            1720usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseOp)
            )
        );
    }
    test_field_ReleaseOp();
    fn test_field_SessionOptionsAppendExecutionProvider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SessionOptionsAppendExecutionProvider) as usize
                    - ptr as usize
            },
            1728usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(SessionOptionsAppendExecutionProvider)
            )
        );
    }
    test_field_SessionOptionsAppendExecutionProvider();
    fn test_field_CopyKernelInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyKernelInfo) as usize - ptr as usize
            },
            1736usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(CopyKernelInfo)
            )
        );
    }
    test_field_CopyKernelInfo();
    fn test_field_ReleaseKernelInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseKernelInfo) as usize - ptr as usize
            },
            1744usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtApi),
                "::",
                stringify!(ReleaseKernelInfo)
            )
        );
    }
    test_field_ReleaseKernelInfo();
}
pub const OrtCustomOpInputOutputCharacteristic_INPUT_OUTPUT_REQUIRED:
    OrtCustomOpInputOutputCharacteristic = 0;
pub const OrtCustomOpInputOutputCharacteristic_INPUT_OUTPUT_OPTIONAL:
    OrtCustomOpInputOutputCharacteristic = 1;
pub type OrtCustomOpInputOutputCharacteristic = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOp {
    pub version: u32,
    pub CreateKernel: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetName: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetExecutionProviderType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetInputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetInputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub GetOutputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: usize) -> ONNXTensorElementDataType,
    >,
    pub GetOutputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> usize>,
    pub KernelCompute: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ),
    >,
    pub KernelDestroy:
        ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void)>,
    pub GetInputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
    pub GetOutputCharacteristic: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            index: usize,
        ) -> OrtCustomOpInputOutputCharacteristic,
    >,
}
#[test]
fn bindgen_test_layout_OrtCustomOp() {
    assert_eq!(
        ::std::mem::size_of::<OrtCustomOp>(),
        96usize,
        concat!("Size of: ", stringify!(OrtCustomOp))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCustomOp>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCustomOp))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_CreateKernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateKernel) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(CreateKernel)
            )
        );
    }
    test_field_CreateKernel();
    fn test_field_GetName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetName) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetName)
            )
        );
    }
    test_field_GetName();
    fn test_field_GetExecutionProviderType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExecutionProviderType) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetExecutionProviderType)
            )
        );
    }
    test_field_GetExecutionProviderType();
    fn test_field_GetInputType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputType) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputType)
            )
        );
    }
    test_field_GetInputType();
    fn test_field_GetInputTypeCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputTypeCount) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputTypeCount)
            )
        );
    }
    test_field_GetInputTypeCount();
    fn test_field_GetOutputType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputType) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputType)
            )
        );
    }
    test_field_GetOutputType();
    fn test_field_GetOutputTypeCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputTypeCount) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputTypeCount)
            )
        );
    }
    test_field_GetOutputTypeCount();
    fn test_field_KernelCompute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelCompute) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(KernelCompute)
            )
        );
    }
    test_field_KernelCompute();
    fn test_field_KernelDestroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KernelDestroy) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(KernelDestroy)
            )
        );
    }
    test_field_KernelDestroy();
    fn test_field_GetInputCharacteristic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputCharacteristic) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetInputCharacteristic)
            )
        );
    }
    test_field_GetInputCharacteristic();
    fn test_field_GetOutputCharacteristic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OrtCustomOp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputCharacteristic) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(OrtCustomOp),
                "::",
                stringify!(GetOutputCharacteristic)
            )
        );
    }
    test_field_GetOutputCharacteristic();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
extern crate libloading;
pub struct onnxruntime {
    __library: ::libloading::Library,
    pub __va_start: Result<
        unsafe extern "C" fn(arg1: *mut *mut ::std::os::raw::c_char, ...),
        ::libloading::Error,
    >,
    pub __security_init_cookie: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub __security_check_cookie:
        Result<unsafe extern "C" fn(_StackCookie: usize), ::libloading::Error>,
    pub __report_gsfailure: Result<unsafe extern "C" fn(_StackCookie: usize), ::libloading::Error>,
    pub _invalid_parameter_noinfo: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _invalid_parameter_noinfo_noreturn: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _invoke_watson: Result<
        unsafe extern "C" fn(
            _Expression: *const wchar_t,
            _FunctionName: *const wchar_t,
            _FileName: *const wchar_t,
            _LineNo: ::std::os::raw::c_uint,
            _Reserved: usize,
        ),
        ::libloading::Error,
    >,
    pub _calloc_base: Result<
        unsafe extern "C" fn(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub calloc: Result<
        unsafe extern "C" fn(
            _Count: ::std::os::raw::c_ulonglong,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _callnewh:
        Result<unsafe extern "C" fn(_Size: usize) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub _expand: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Size: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _free_base:
        Result<unsafe extern "C" fn(_Block: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub free:
        Result<unsafe extern "C" fn(_Block: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub _malloc_base: Result<
        unsafe extern "C" fn(_Size: usize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub malloc: Result<
        unsafe extern "C" fn(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _msize_base: Result<
        unsafe extern "C" fn(_Block: *mut ::std::os::raw::c_void) -> usize,
        ::libloading::Error,
    >,
    pub _msize: Result<
        unsafe extern "C" fn(_Block: *mut ::std::os::raw::c_void) -> usize,
        ::libloading::Error,
    >,
    pub _realloc_base: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Size: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub realloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _recalloc_base: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Count: usize,
            _Size: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _recalloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Count: usize,
            _Size: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_free:
        Result<unsafe extern "C" fn(_Block: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub _aligned_malloc: Result<
        unsafe extern "C" fn(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_offset_malloc: Result<
        unsafe extern "C" fn(
            _Size: usize,
            _Alignment: usize,
            _Offset: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_msize: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Alignment: usize,
            _Offset: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _aligned_offset_realloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Size: usize,
            _Alignment: usize,
            _Offset: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_offset_recalloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Count: usize,
            _Size: usize,
            _Alignment: usize,
            _Offset: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_realloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Size: usize,
            _Alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _aligned_recalloc: Result<
        unsafe extern "C" fn(
            _Block: *mut ::std::os::raw::c_void,
            _Count: usize,
            _Size: usize,
            _Alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub bsearch_s: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: rsize_t,
            _SizeOfElements: rsize_t,
            _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort_s: Result<
        unsafe extern "C" fn(
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: rsize_t,
            _SizeOfElements: rsize_t,
            _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub bsearch: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: usize,
            _SizeOfElements: usize,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort: Result<
        unsafe extern "C" fn(
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: usize,
            _SizeOfElements: usize,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ),
        ::libloading::Error,
    >,
    pub _lfind_s: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: usize,
            _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _lfind: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: ::std::os::raw::c_uint,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _lsearch_s: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: usize,
            _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
            _Context: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _lsearch: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: ::std::os::raw::c_uint,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub lfind: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *const ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: ::std::os::raw::c_uint,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub lsearch: Result<
        unsafe extern "C" fn(
            _Key: *const ::std::os::raw::c_void,
            _Base: *mut ::std::os::raw::c_void,
            _NumOfElements: *mut ::std::os::raw::c_uint,
            _SizeOfElements: ::std::os::raw::c_uint,
            _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub _itow_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_int,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _itow: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_int,
            _Buffer: *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _ltow_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_long,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ltow: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_long,
            _Buffer: *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _ultow_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ultow: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Buffer: *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcstod: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64,
        ::libloading::Error,
    >,
    pub _wcstod_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Locale: _locale_t,
        ) -> f64,
        ::libloading::Error,
    >,
    pub wcstol: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _wcstol_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub wcstoll: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wcstoll_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub wcstoul: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _wcstoul_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub wcstoull: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _wcstoull_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub wcstold: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64,
        ::libloading::Error,
    >,
    pub _wcstold_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Locale: _locale_t,
        ) -> f64,
        ::libloading::Error,
    >,
    pub wcstof: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32,
        ::libloading::Error,
    >,
    pub _wcstof_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Locale: _locale_t,
        ) -> f32,
        ::libloading::Error,
    >,
    pub _wtof: Result<unsafe extern "C" fn(_String: *const wchar_t) -> f64, ::libloading::Error>,
    pub _wtof_l: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Locale: _locale_t) -> f64,
        ::libloading::Error,
    >,
    pub _wtoi: Result<
        unsafe extern "C" fn(_String: *const wchar_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wtoi_l: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wtol: Result<
        unsafe extern "C" fn(_String: *const wchar_t) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _wtol_l: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _wtoll: Result<
        unsafe extern "C" fn(_String: *const wchar_t) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wtoll_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _i64tow_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_longlong,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _i64tow: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_longlong,
            _Buffer: *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _ui64tow_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ui64tow: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Buffer: *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wtoi64: Result<
        unsafe extern "C" fn(_String: *const wchar_t) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wtoi64_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wcstoi64: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wcstoi64_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _wcstoui64: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _wcstoui64_l: Result<
        unsafe extern "C" fn(
            _String: *const wchar_t,
            _EndPtr: *mut *mut wchar_t,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _wfullpath: Result<
        unsafe extern "C" fn(
            _Buffer: *mut wchar_t,
            _Path: *const wchar_t,
            _BufferCount: usize,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wmakepath_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _Drive: *const wchar_t,
            _Dir: *const wchar_t,
            _Filename: *const wchar_t,
            _Ext: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wmakepath: Result<
        unsafe extern "C" fn(
            _Buffer: *mut wchar_t,
            _Drive: *const wchar_t,
            _Dir: *const wchar_t,
            _Filename: *const wchar_t,
            _Ext: *const wchar_t,
        ),
        ::libloading::Error,
    >,
    pub _wperror: Result<unsafe extern "C" fn(_ErrorMessage: *const wchar_t), ::libloading::Error>,
    pub _wsplitpath: Result<
        unsafe extern "C" fn(
            _FullPath: *const wchar_t,
            _Drive: *mut wchar_t,
            _Dir: *mut wchar_t,
            _Filename: *mut wchar_t,
            _Ext: *mut wchar_t,
        ),
        ::libloading::Error,
    >,
    pub _wsplitpath_s: Result<
        unsafe extern "C" fn(
            _FullPath: *const wchar_t,
            _Drive: *mut wchar_t,
            _DriveCount: usize,
            _Dir: *mut wchar_t,
            _DirCount: usize,
            _Filename: *mut wchar_t,
            _FilenameCount: usize,
            _Ext: *mut wchar_t,
            _ExtCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wdupenv_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut *mut wchar_t,
            _BufferCount: *mut usize,
            _VarName: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wgetenv:
        Result<unsafe extern "C" fn(_VarName: *const wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub _wgetenv_s: Result<
        unsafe extern "C" fn(
            _RequiredCount: *mut usize,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
            _VarName: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wputenv: Result<
        unsafe extern "C" fn(_EnvString: *const wchar_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wputenv_s: Result<
        unsafe extern "C" fn(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t,
        ::libloading::Error,
    >,
    pub _wsearchenv_s: Result<
        unsafe extern "C" fn(
            _Filename: *const wchar_t,
            _VarName: *const wchar_t,
            _Buffer: *mut wchar_t,
            _BufferCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wsearchenv: Result<
        unsafe extern "C" fn(
            _Filename: *const wchar_t,
            _VarName: *const wchar_t,
            _ResultPath: *mut wchar_t,
        ),
        ::libloading::Error,
    >,
    pub _wsystem: Result<
        unsafe extern "C" fn(_Command: *const wchar_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _swab: Result<
        unsafe extern "C" fn(
            _Buf1: *mut ::std::os::raw::c_char,
            _Buf2: *mut ::std::os::raw::c_char,
            _SizeInBytes: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub exit: Result<unsafe extern "C" fn(_Code: ::std::os::raw::c_int), ::libloading::Error>,
    pub _exit: Result<unsafe extern "C" fn(_Code: ::std::os::raw::c_int), ::libloading::Error>,
    pub _Exit: Result<unsafe extern "C" fn(_Code: ::std::os::raw::c_int), ::libloading::Error>,
    pub quick_exit: Result<unsafe extern "C" fn(_Code: ::std::os::raw::c_int), ::libloading::Error>,
    pub abort: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub _set_abort_behavior: Result<
        unsafe extern "C" fn(
            _Flags: ::std::os::raw::c_uint,
            _Mask: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub atexit: Result<
        unsafe extern "C" fn(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _onexit: Result<unsafe extern "C" fn(_Func: _onexit_t) -> _onexit_t, ::libloading::Error>,
    pub at_quick_exit: Result<
        unsafe extern "C" fn(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _set_purecall_handler: Result<
        unsafe extern "C" fn(_Handler: _purecall_handler) -> _purecall_handler,
        ::libloading::Error,
    >,
    pub _get_purecall_handler:
        Result<unsafe extern "C" fn() -> _purecall_handler, ::libloading::Error>,
    pub _set_invalid_parameter_handler: Result<
        unsafe extern "C" fn(_Handler: _invalid_parameter_handler) -> _invalid_parameter_handler,
        ::libloading::Error,
    >,
    pub _get_invalid_parameter_handler:
        Result<unsafe extern "C" fn() -> _invalid_parameter_handler, ::libloading::Error>,
    pub _set_thread_local_invalid_parameter_handler: Result<
        unsafe extern "C" fn(_Handler: _invalid_parameter_handler) -> _invalid_parameter_handler,
        ::libloading::Error,
    >,
    pub _get_thread_local_invalid_parameter_handler:
        Result<unsafe extern "C" fn() -> _invalid_parameter_handler, ::libloading::Error>,
    pub _set_error_mode: Result<
        unsafe extern "C" fn(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _errno: Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub _set_errno:
        Result<unsafe extern "C" fn(_Value: ::std::os::raw::c_int) -> errno_t, ::libloading::Error>,
    pub _get_errno: Result<
        unsafe extern "C" fn(_Value: *mut ::std::os::raw::c_int) -> errno_t,
        ::libloading::Error,
    >,
    pub __doserrno:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_ulong, ::libloading::Error>,
    pub _set_doserrno: Result<
        unsafe extern "C" fn(_Value: ::std::os::raw::c_ulong) -> errno_t,
        ::libloading::Error,
    >,
    pub _get_doserrno: Result<
        unsafe extern "C" fn(_Value: *mut ::std::os::raw::c_ulong) -> errno_t,
        ::libloading::Error,
    >,
    pub __sys_errlist:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub __sys_nerr:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub perror:
        Result<unsafe extern "C" fn(_ErrMsg: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub __p__pgmptr:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub __p__wpgmptr: Result<unsafe extern "C" fn() -> *mut *mut wchar_t, ::libloading::Error>,
    pub __p__fmode:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub _get_pgmptr: Result<
        unsafe extern "C" fn(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t,
        ::libloading::Error,
    >,
    pub _get_wpgmptr:
        Result<unsafe extern "C" fn(_Value: *mut *mut wchar_t) -> errno_t, ::libloading::Error>,
    pub _set_fmode:
        Result<unsafe extern "C" fn(_Mode: ::std::os::raw::c_int) -> errno_t, ::libloading::Error>,
    pub _get_fmode: Result<
        unsafe extern "C" fn(_PMode: *mut ::std::os::raw::c_int) -> errno_t,
        ::libloading::Error,
    >,
    pub abs: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub labs: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub llabs: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _abs64: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _byteswap_ushort: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub _byteswap_ulong: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _byteswap_uint64: Result<
        unsafe extern "C" fn(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub div: Result<
        unsafe extern "C" fn(
            _Numerator: ::std::os::raw::c_int,
            _Denominator: ::std::os::raw::c_int,
        ) -> div_t,
        ::libloading::Error,
    >,
    pub ldiv: Result<
        unsafe extern "C" fn(
            _Numerator: ::std::os::raw::c_long,
            _Denominator: ::std::os::raw::c_long,
        ) -> ldiv_t,
        ::libloading::Error,
    >,
    pub lldiv: Result<
        unsafe extern "C" fn(
            _Numerator: ::std::os::raw::c_longlong,
            _Denominator: ::std::os::raw::c_longlong,
        ) -> lldiv_t,
        ::libloading::Error,
    >,
    pub _rotl: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_uint,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub _lrotl: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _rotl64: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _rotr: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_uint,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub _lrotr: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _rotr64: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Shift: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub srand: Result<unsafe extern "C" fn(_Seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub rand: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub atof: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub atoi: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub atol: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub atoll: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _atoi64: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _atof_l: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64,
        ::libloading::Error,
    >,
    pub _atoi_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atol_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _atoll_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _atoi64_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _atoflt: Result<
        unsafe extern "C" fn(
            _Result: *mut _CRT_FLOAT,
            _String: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atodbl: Result<
        unsafe extern "C" fn(
            _Result: *mut _CRT_DOUBLE,
            _String: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atoldbl: Result<
        unsafe extern "C" fn(
            _Result: *mut _LDOUBLE,
            _String: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atoflt_l: Result<
        unsafe extern "C" fn(
            _Result: *mut _CRT_FLOAT,
            _String: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atodbl_l: Result<
        unsafe extern "C" fn(
            _Result: *mut _CRT_DOUBLE,
            _String: *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _atoldbl_l: Result<
        unsafe extern "C" fn(
            _Result: *mut _LDOUBLE,
            _String: *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strtof: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
        ) -> f32,
        ::libloading::Error,
    >,
    pub _strtof_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> f32,
        ::libloading::Error,
    >,
    pub strtod: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub _strtod_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtold: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub _strtold_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtol: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub _strtol_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strtoll: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _strtoll_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoul: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub _strtoul_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strtoull: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strtoull_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strtoi64: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _strtoi64_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub _strtoui64: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strtoui64_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _EndPtr: *mut *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _itoa_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_int,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _itoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_int,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _ltoa_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_long,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ltoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_long,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _ultoa_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ultoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _i64toa_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_longlong,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _i64toa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_longlong,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _ui64toa_s: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Radix: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ui64toa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulonglong,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _ecvt_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _ecvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _fcvt_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Value: f64,
            _FractionalDigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _fcvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _FractionalDigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _gcvt_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _gcvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
            _Buffer: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ___mb_cur_max_func:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ___mb_cur_max_l_func: Result<
        unsafe extern "C" fn(_Locale: _locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mblen: Result<
        unsafe extern "C" fn(
            _Ch: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _mblen_l: Result<
        unsafe extern "C" fn(
            _Ch: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _mbstrlen: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> usize,
        ::libloading::Error,
    >,
    pub _mbstrlen_l: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize,
        ::libloading::Error,
    >,
    pub _mbstrnlen: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize,
        ::libloading::Error,
    >,
    pub _mbstrnlen_l: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            _DstCh: *mut wchar_t,
            _SrcCh: *const ::std::os::raw::c_char,
            _SrcSizeInBytes: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _mbtowc_l: Result<
        unsafe extern "C" fn(
            _DstCh: *mut wchar_t,
            _SrcCh: *const ::std::os::raw::c_char,
            _SrcSizeInBytes: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs_s: Result<
        unsafe extern "C" fn(
            _PtNumOfCharConverted: *mut usize,
            _DstBuf: *mut wchar_t,
            _SizeInWords: usize,
            _SrcBuf: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            _Dest: *mut wchar_t,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _mbstowcs_s_l: Result<
        unsafe extern "C" fn(
            _PtNumOfCharConverted: *mut usize,
            _DstBuf: *mut wchar_t,
            _SizeInWords: usize,
            _SrcBuf: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _mbstowcs_l: Result<
        unsafe extern "C" fn(
            _Dest: *mut wchar_t,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub wctomb: Result<
        unsafe extern "C" fn(
            _MbCh: *mut ::std::os::raw::c_char,
            _WCh: wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wctomb_l: Result<
        unsafe extern "C" fn(
            _MbCh: *mut ::std::os::raw::c_char,
            _WCh: wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wctomb_s: Result<
        unsafe extern "C" fn(
            _SizeConverted: *mut ::std::os::raw::c_int,
            _MbCh: *mut ::std::os::raw::c_char,
            _SizeInBytes: rsize_t,
            _WCh: wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wctomb_s_l: Result<
        unsafe extern "C" fn(
            _SizeConverted: *mut ::std::os::raw::c_int,
            _MbCh: *mut ::std::os::raw::c_char,
            _SizeInBytes: usize,
            _WCh: wchar_t,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcstombs_s: Result<
        unsafe extern "C" fn(
            _PtNumOfCharConverted: *mut usize,
            _Dst: *mut ::std::os::raw::c_char,
            _DstSizeInBytes: usize,
            _Src: *const wchar_t,
            _MaxCountInBytes: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcstombs: Result<
        unsafe extern "C" fn(
            _Dest: *mut ::std::os::raw::c_char,
            _Source: *const wchar_t,
            _MaxCount: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _wcstombs_s_l: Result<
        unsafe extern "C" fn(
            _PtNumOfCharConverted: *mut usize,
            _Dst: *mut ::std::os::raw::c_char,
            _DstSizeInBytes: usize,
            _Src: *const wchar_t,
            _MaxCountInBytes: usize,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcstombs_l: Result<
        unsafe extern "C" fn(
            _Dest: *mut ::std::os::raw::c_char,
            _Source: *const wchar_t,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _fullpath: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _Path: *const ::std::os::raw::c_char,
            _BufferCount: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _makepath_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
            _Drive: *const ::std::os::raw::c_char,
            _Dir: *const ::std::os::raw::c_char,
            _Filename: *const ::std::os::raw::c_char,
            _Ext: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _makepath: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _Drive: *const ::std::os::raw::c_char,
            _Dir: *const ::std::os::raw::c_char,
            _Filename: *const ::std::os::raw::c_char,
            _Ext: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub _splitpath: Result<
        unsafe extern "C" fn(
            _FullPath: *const ::std::os::raw::c_char,
            _Drive: *mut ::std::os::raw::c_char,
            _Dir: *mut ::std::os::raw::c_char,
            _Filename: *mut ::std::os::raw::c_char,
            _Ext: *mut ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub _splitpath_s: Result<
        unsafe extern "C" fn(
            _FullPath: *const ::std::os::raw::c_char,
            _Drive: *mut ::std::os::raw::c_char,
            _DriveCount: usize,
            _Dir: *mut ::std::os::raw::c_char,
            _DirCount: usize,
            _Filename: *mut ::std::os::raw::c_char,
            _FilenameCount: usize,
            _Ext: *mut ::std::os::raw::c_char,
            _ExtCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub getenv_s: Result<
        unsafe extern "C" fn(
            _RequiredCount: *mut usize,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: rsize_t,
            _VarName: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub __p___argc:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub __p___argv: Result<
        unsafe extern "C" fn() -> *mut *mut *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __p___wargv: Result<unsafe extern "C" fn() -> *mut *mut *mut wchar_t, ::libloading::Error>,
    pub __p__environ: Result<
        unsafe extern "C" fn() -> *mut *mut *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __p__wenviron:
        Result<unsafe extern "C" fn() -> *mut *mut *mut wchar_t, ::libloading::Error>,
    pub getenv: Result<
        unsafe extern "C" fn(
            _VarName: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _dupenv_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut *mut ::std::os::raw::c_char,
            _BufferCount: *mut usize,
            _VarName: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub system: Result<
        unsafe extern "C" fn(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _putenv: Result<
        unsafe extern "C" fn(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _putenv_s: Result<
        unsafe extern "C" fn(
            _Name: *const ::std::os::raw::c_char,
            _Value: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _searchenv_s: Result<
        unsafe extern "C" fn(
            _Filename: *const ::std::os::raw::c_char,
            _VarName: *const ::std::os::raw::c_char,
            _Buffer: *mut ::std::os::raw::c_char,
            _BufferCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _searchenv: Result<
        unsafe extern "C" fn(
            _Filename: *const ::std::os::raw::c_char,
            _VarName: *const ::std::os::raw::c_char,
            _Buffer: *mut ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub _seterrormode:
        Result<unsafe extern "C" fn(_Mode: ::std::os::raw::c_int), ::libloading::Error>,
    pub _beep: Result<
        unsafe extern "C" fn(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub _sleep:
        Result<unsafe extern "C" fn(_Duration: ::std::os::raw::c_ulong), ::libloading::Error>,
    pub ecvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fcvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _FractionalDigitCount: ::std::os::raw::c_int,
            _PtDec: *mut ::std::os::raw::c_int,
            _PtSign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gcvt: Result<
        unsafe extern "C" fn(
            _Value: f64,
            _DigitCount: ::std::os::raw::c_int,
            _DstBuf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub itoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_int,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ltoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_long,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub swab: Result<
        unsafe extern "C" fn(
            _Buf1: *mut ::std::os::raw::c_char,
            _Buf2: *mut ::std::os::raw::c_char,
            _SizeInBytes: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ultoa: Result<
        unsafe extern "C" fn(
            _Value: ::std::os::raw::c_ulong,
            _Buffer: *mut ::std::os::raw::c_char,
            _Radix: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub putenv: Result<
        unsafe extern "C" fn(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub onexit: Result<unsafe extern "C" fn(_Func: _onexit_t) -> _onexit_t, ::libloading::Error>,
    pub memchr: Result<
        unsafe extern "C" fn(
            _Buf: *const ::std::os::raw::c_void,
            _Val: ::std::os::raw::c_int,
            _MaxCount: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memcmp: Result<
        unsafe extern "C" fn(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memcpy: Result<
        unsafe extern "C" fn(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmove: Result<
        unsafe extern "C" fn(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memset: Result<
        unsafe extern "C" fn(
            _Dst: *mut ::std::os::raw::c_void,
            _Val: ::std::os::raw::c_int,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strchr: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _Val: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrchr: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _Ch: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strstr: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _SubStr: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wcschr: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_ushort,
            _Ch: ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub wcsrchr: Result<
        unsafe extern "C" fn(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcsstr: Result<
        unsafe extern "C" fn(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _memicmp: Result<
        unsafe extern "C" fn(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _memicmp_l: Result<
        unsafe extern "C" fn(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memccpy: Result<
        unsafe extern "C" fn(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Val: ::std::os::raw::c_int,
            _Size: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memicmp: Result<
        unsafe extern "C" fn(
            _Buf1: *const ::std::os::raw::c_void,
            _Buf2: *const ::std::os::raw::c_void,
            _Size: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcscat_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: rsize_t,
            _Source: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcscpy_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: rsize_t,
            _Source: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcsncat_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: rsize_t,
            _Source: *const wchar_t,
            _MaxCount: rsize_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcsncpy_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: rsize_t,
            _Source: *const wchar_t,
            _MaxCount: rsize_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub wcstok_s: Result<
        unsafe extern "C" fn(
            _String: *mut wchar_t,
            _Delimiter: *const wchar_t,
            _Context: *mut *mut wchar_t,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcsdup:
        Result<unsafe extern "C" fn(_String: *const wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub wcscat: Result<
        unsafe extern "C" fn(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcscmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_ushort,
            _String2: *const ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcscpy: Result<
        unsafe extern "C" fn(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcscspn: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Control: *const wchar_t) -> usize,
        ::libloading::Error,
    >,
    pub wcslen: Result<
        unsafe extern "C" fn(
            _String: *const ::std::os::raw::c_ushort,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub wcsnlen: Result<
        unsafe extern "C" fn(_Source: *const wchar_t, _MaxCount: usize) -> usize,
        ::libloading::Error,
    >,
    pub wcsncat: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _Source: *const wchar_t,
            _Count: usize,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcsncmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_ushort,
            _String2: *const ::std::os::raw::c_ushort,
            _MaxCount: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcsncpy: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _Source: *const wchar_t,
            _Count: usize,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcspbrk: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcsspn: Result<
        unsafe extern "C" fn(_String: *const wchar_t, _Control: *const wchar_t) -> usize,
        ::libloading::Error,
    >,
    pub wcstok: Result<
        unsafe extern "C" fn(
            _String: *mut wchar_t,
            _Delimiter: *const wchar_t,
            _Context: *mut *mut wchar_t,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcserror: Result<
        unsafe extern "C" fn(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcserror_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut wchar_t,
            _SizeInWords: usize,
            _ErrorNumber: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub __wcserror:
        Result<unsafe extern "C" fn(_String: *const wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub __wcserror_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut wchar_t,
            _SizeInWords: usize,
            _ErrorMessage: *const wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcsicmp: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsicmp_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsnicmp: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsnicmp_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsnset_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: usize,
            _Value: wchar_t,
            _MaxCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcsnset: Result<
        unsafe extern "C" fn(
            _String: *mut wchar_t,
            _Value: wchar_t,
            _MaxCount: usize,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcsrev:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub _wcsset_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _SizeInWords: usize,
            _Value: wchar_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcsset: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcslwr_s: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcslwr:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub _wcslwr_s_l: Result<
        unsafe extern "C" fn(
            _String: *mut wchar_t,
            _SizeInWords: usize,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcslwr_l: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub _wcsupr_s: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Size: usize) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcsupr:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub _wcsupr_s_l: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t,
        ::libloading::Error,
    >,
    pub _wcsupr_l: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcsxfrm: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _Source: *const wchar_t,
            _MaxCount: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _wcsxfrm_l: Result<
        unsafe extern "C" fn(
            _Destination: *mut wchar_t,
            _Source: *const wchar_t,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub wcscoll: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcscoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsicoll: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsicoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsncoll: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsncoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsnicoll: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _wcsnicoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcsdup:
        Result<unsafe extern "C" fn(_String: *const wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub wcsicmp: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcsnicmp: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcsnset: Result<
        unsafe extern "C" fn(
            _String: *mut wchar_t,
            _Value: wchar_t,
            _MaxCount: usize,
        ) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcsrev:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub wcsset: Result<
        unsafe extern "C" fn(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t,
        ::libloading::Error,
    >,
    pub wcslwr:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub wcsupr:
        Result<unsafe extern "C" fn(_String: *mut wchar_t) -> *mut wchar_t, ::libloading::Error>,
    pub wcsicoll: Result<
        unsafe extern "C" fn(
            _String1: *const wchar_t,
            _String2: *const wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcpy_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _SizeInBytes: rsize_t,
            _Source: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strcat_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _SizeInBytes: rsize_t,
            _Source: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strerror_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _SizeInBytes: usize,
            _ErrorNumber: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strncat_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _SizeInBytes: rsize_t,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: rsize_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strncpy_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _SizeInBytes: rsize_t,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: rsize_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strtok_s: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Delimiter: *const ::std::os::raw::c_char,
            _Context: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _memccpy: Result<
        unsafe extern "C" fn(
            _Dst: *mut ::std::os::raw::c_void,
            _Src: *const ::std::os::raw::c_void,
            _Val: ::std::os::raw::c_int,
            _MaxCount: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strcat: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcmp: Result<
        unsafe extern "C" fn(
            _Str1: *const ::std::os::raw::c_char,
            _Str2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strcmpi: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcoll: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strcoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcpy: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcspn: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _Control: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strdup: Result<
        unsafe extern "C" fn(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strerror: Result<
        unsafe extern "C" fn(
            _ErrorMessage: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strerror_s: Result<
        unsafe extern "C" fn(
            _Buffer: *mut ::std::os::raw::c_char,
            _SizeInBytes: usize,
            _ErrorMessage: *const ::std::os::raw::c_char,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub strerror: Result<
        unsafe extern "C" fn(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _stricmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _stricoll: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _stricoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _stricmp_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strlen: Result<
        unsafe extern "C" fn(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strlwr_s: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t,
        ::libloading::Error,
    >,
    pub _strlwr: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strlwr_s_l: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Size: usize,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _strlwr_l: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncat: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
            _Count: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncmp: Result<
        unsafe extern "C" fn(
            _Str1: *const ::std::os::raw::c_char,
            _Str2: *const ::std::os::raw::c_char,
            _MaxCount: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strnicmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strnicmp_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strnicoll: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strnicoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strncoll: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _strncoll_l: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __strncnt: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize,
        ::libloading::Error,
    >,
    pub strncpy: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
            _Count: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strnlen: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize,
        ::libloading::Error,
    >,
    pub _strnset_s: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _SizeInBytes: usize,
            _Value: ::std::os::raw::c_int,
            _MaxCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _strnset: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Value: ::std::os::raw::c_int,
            _Count: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strpbrk: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _Control: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strrev: Result<
        unsafe extern "C" fn(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strset_s: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _DestinationSize: usize,
            _Value: ::std::os::raw::c_int,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _strset: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Value: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strspn: Result<
        unsafe extern "C" fn(
            _Str: *const ::std::os::raw::c_char,
            _Control: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub strtok: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Delimiter: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strupr_s: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t,
        ::libloading::Error,
    >,
    pub _strupr: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub _strupr_s_l: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Size: usize,
            _Locale: _locale_t,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub _strupr_l: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Locale: _locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strxfrm: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub _strxfrm_l: Result<
        unsafe extern "C" fn(
            _Destination: *mut ::std::os::raw::c_char,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: usize,
            _Locale: _locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub strdup: Result<
        unsafe extern "C" fn(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcmpi: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stricmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strlwr: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strnicmp: Result<
        unsafe extern "C" fn(
            _String1: *const ::std::os::raw::c_char,
            _String2: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strnset: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Value: ::std::os::raw::c_int,
            _MaxCount: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrev: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strset: Result<
        unsafe extern "C" fn(
            _String: *mut ::std::os::raw::c_char,
            _Value: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strupr: Result<
        unsafe extern "C" fn(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub OrtGetApiBase: Result<unsafe extern "C" fn() -> *const OrtApiBase, ::libloading::Error>,
    pub OrtSessionOptionsAppendExecutionProvider_CUDA: Result<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            device_id: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
        ::libloading::Error,
    >,
    pub OrtSessionOptionsAppendExecutionProvider_MIGraphX: Result<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            device_id: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
        ::libloading::Error,
    >,
}
impl onnxruntime {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let __va_start = __library.get(b"__va_start\0").map(|sym| *sym);
        let __security_init_cookie = __library.get(b"__security_init_cookie\0").map(|sym| *sym);
        let __security_check_cookie = __library.get(b"__security_check_cookie\0").map(|sym| *sym);
        let __report_gsfailure = __library.get(b"__report_gsfailure\0").map(|sym| *sym);
        let _invalid_parameter_noinfo = __library
            .get(b"_invalid_parameter_noinfo\0")
            .map(|sym| *sym);
        let _invalid_parameter_noinfo_noreturn = __library
            .get(b"_invalid_parameter_noinfo_noreturn\0")
            .map(|sym| *sym);
        let _invoke_watson = __library.get(b"_invoke_watson\0").map(|sym| *sym);
        let _calloc_base = __library.get(b"_calloc_base\0").map(|sym| *sym);
        let calloc = __library.get(b"calloc\0").map(|sym| *sym);
        let _callnewh = __library.get(b"_callnewh\0").map(|sym| *sym);
        let _expand = __library.get(b"_expand\0").map(|sym| *sym);
        let _free_base = __library.get(b"_free_base\0").map(|sym| *sym);
        let free = __library.get(b"free\0").map(|sym| *sym);
        let _malloc_base = __library.get(b"_malloc_base\0").map(|sym| *sym);
        let malloc = __library.get(b"malloc\0").map(|sym| *sym);
        let _msize_base = __library.get(b"_msize_base\0").map(|sym| *sym);
        let _msize = __library.get(b"_msize\0").map(|sym| *sym);
        let _realloc_base = __library.get(b"_realloc_base\0").map(|sym| *sym);
        let realloc = __library.get(b"realloc\0").map(|sym| *sym);
        let _recalloc_base = __library.get(b"_recalloc_base\0").map(|sym| *sym);
        let _recalloc = __library.get(b"_recalloc\0").map(|sym| *sym);
        let _aligned_free = __library.get(b"_aligned_free\0").map(|sym| *sym);
        let _aligned_malloc = __library.get(b"_aligned_malloc\0").map(|sym| *sym);
        let _aligned_offset_malloc = __library.get(b"_aligned_offset_malloc\0").map(|sym| *sym);
        let _aligned_msize = __library.get(b"_aligned_msize\0").map(|sym| *sym);
        let _aligned_offset_realloc = __library.get(b"_aligned_offset_realloc\0").map(|sym| *sym);
        let _aligned_offset_recalloc = __library.get(b"_aligned_offset_recalloc\0").map(|sym| *sym);
        let _aligned_realloc = __library.get(b"_aligned_realloc\0").map(|sym| *sym);
        let _aligned_recalloc = __library.get(b"_aligned_recalloc\0").map(|sym| *sym);
        let bsearch_s = __library.get(b"bsearch_s\0").map(|sym| *sym);
        let qsort_s = __library.get(b"qsort_s\0").map(|sym| *sym);
        let bsearch = __library.get(b"bsearch\0").map(|sym| *sym);
        let qsort = __library.get(b"qsort\0").map(|sym| *sym);
        let _lfind_s = __library.get(b"_lfind_s\0").map(|sym| *sym);
        let _lfind = __library.get(b"_lfind\0").map(|sym| *sym);
        let _lsearch_s = __library.get(b"_lsearch_s\0").map(|sym| *sym);
        let _lsearch = __library.get(b"_lsearch\0").map(|sym| *sym);
        let lfind = __library.get(b"lfind\0").map(|sym| *sym);
        let lsearch = __library.get(b"lsearch\0").map(|sym| *sym);
        let _itow_s = __library.get(b"_itow_s\0").map(|sym| *sym);
        let _itow = __library.get(b"_itow\0").map(|sym| *sym);
        let _ltow_s = __library.get(b"_ltow_s\0").map(|sym| *sym);
        let _ltow = __library.get(b"_ltow\0").map(|sym| *sym);
        let _ultow_s = __library.get(b"_ultow_s\0").map(|sym| *sym);
        let _ultow = __library.get(b"_ultow\0").map(|sym| *sym);
        let wcstod = __library.get(b"wcstod\0").map(|sym| *sym);
        let _wcstod_l = __library.get(b"_wcstod_l\0").map(|sym| *sym);
        let wcstol = __library.get(b"wcstol\0").map(|sym| *sym);
        let _wcstol_l = __library.get(b"_wcstol_l\0").map(|sym| *sym);
        let wcstoll = __library.get(b"wcstoll\0").map(|sym| *sym);
        let _wcstoll_l = __library.get(b"_wcstoll_l\0").map(|sym| *sym);
        let wcstoul = __library.get(b"wcstoul\0").map(|sym| *sym);
        let _wcstoul_l = __library.get(b"_wcstoul_l\0").map(|sym| *sym);
        let wcstoull = __library.get(b"wcstoull\0").map(|sym| *sym);
        let _wcstoull_l = __library.get(b"_wcstoull_l\0").map(|sym| *sym);
        let wcstold = __library.get(b"wcstold\0").map(|sym| *sym);
        let _wcstold_l = __library.get(b"_wcstold_l\0").map(|sym| *sym);
        let wcstof = __library.get(b"wcstof\0").map(|sym| *sym);
        let _wcstof_l = __library.get(b"_wcstof_l\0").map(|sym| *sym);
        let _wtof = __library.get(b"_wtof\0").map(|sym| *sym);
        let _wtof_l = __library.get(b"_wtof_l\0").map(|sym| *sym);
        let _wtoi = __library.get(b"_wtoi\0").map(|sym| *sym);
        let _wtoi_l = __library.get(b"_wtoi_l\0").map(|sym| *sym);
        let _wtol = __library.get(b"_wtol\0").map(|sym| *sym);
        let _wtol_l = __library.get(b"_wtol_l\0").map(|sym| *sym);
        let _wtoll = __library.get(b"_wtoll\0").map(|sym| *sym);
        let _wtoll_l = __library.get(b"_wtoll_l\0").map(|sym| *sym);
        let _i64tow_s = __library.get(b"_i64tow_s\0").map(|sym| *sym);
        let _i64tow = __library.get(b"_i64tow\0").map(|sym| *sym);
        let _ui64tow_s = __library.get(b"_ui64tow_s\0").map(|sym| *sym);
        let _ui64tow = __library.get(b"_ui64tow\0").map(|sym| *sym);
        let _wtoi64 = __library.get(b"_wtoi64\0").map(|sym| *sym);
        let _wtoi64_l = __library.get(b"_wtoi64_l\0").map(|sym| *sym);
        let _wcstoi64 = __library.get(b"_wcstoi64\0").map(|sym| *sym);
        let _wcstoi64_l = __library.get(b"_wcstoi64_l\0").map(|sym| *sym);
        let _wcstoui64 = __library.get(b"_wcstoui64\0").map(|sym| *sym);
        let _wcstoui64_l = __library.get(b"_wcstoui64_l\0").map(|sym| *sym);
        let _wfullpath = __library.get(b"_wfullpath\0").map(|sym| *sym);
        let _wmakepath_s = __library.get(b"_wmakepath_s\0").map(|sym| *sym);
        let _wmakepath = __library.get(b"_wmakepath\0").map(|sym| *sym);
        let _wperror = __library.get(b"_wperror\0").map(|sym| *sym);
        let _wsplitpath = __library.get(b"_wsplitpath\0").map(|sym| *sym);
        let _wsplitpath_s = __library.get(b"_wsplitpath_s\0").map(|sym| *sym);
        let _wdupenv_s = __library.get(b"_wdupenv_s\0").map(|sym| *sym);
        let _wgetenv = __library.get(b"_wgetenv\0").map(|sym| *sym);
        let _wgetenv_s = __library.get(b"_wgetenv_s\0").map(|sym| *sym);
        let _wputenv = __library.get(b"_wputenv\0").map(|sym| *sym);
        let _wputenv_s = __library.get(b"_wputenv_s\0").map(|sym| *sym);
        let _wsearchenv_s = __library.get(b"_wsearchenv_s\0").map(|sym| *sym);
        let _wsearchenv = __library.get(b"_wsearchenv\0").map(|sym| *sym);
        let _wsystem = __library.get(b"_wsystem\0").map(|sym| *sym);
        let _swab = __library.get(b"_swab\0").map(|sym| *sym);
        let exit = __library.get(b"exit\0").map(|sym| *sym);
        let _exit = __library.get(b"_exit\0").map(|sym| *sym);
        let _Exit = __library.get(b"_Exit\0").map(|sym| *sym);
        let quick_exit = __library.get(b"quick_exit\0").map(|sym| *sym);
        let abort = __library.get(b"abort\0").map(|sym| *sym);
        let _set_abort_behavior = __library.get(b"_set_abort_behavior\0").map(|sym| *sym);
        let atexit = __library.get(b"atexit\0").map(|sym| *sym);
        let _onexit = __library.get(b"_onexit\0").map(|sym| *sym);
        let at_quick_exit = __library.get(b"at_quick_exit\0").map(|sym| *sym);
        let _set_purecall_handler = __library.get(b"_set_purecall_handler\0").map(|sym| *sym);
        let _get_purecall_handler = __library.get(b"_get_purecall_handler\0").map(|sym| *sym);
        let _set_invalid_parameter_handler = __library
            .get(b"_set_invalid_parameter_handler\0")
            .map(|sym| *sym);
        let _get_invalid_parameter_handler = __library
            .get(b"_get_invalid_parameter_handler\0")
            .map(|sym| *sym);
        let _set_thread_local_invalid_parameter_handler = __library
            .get(b"_set_thread_local_invalid_parameter_handler\0")
            .map(|sym| *sym);
        let _get_thread_local_invalid_parameter_handler = __library
            .get(b"_get_thread_local_invalid_parameter_handler\0")
            .map(|sym| *sym);
        let _set_error_mode = __library.get(b"_set_error_mode\0").map(|sym| *sym);
        let _errno = __library.get(b"_errno\0").map(|sym| *sym);
        let _set_errno = __library.get(b"_set_errno\0").map(|sym| *sym);
        let _get_errno = __library.get(b"_get_errno\0").map(|sym| *sym);
        let __doserrno = __library.get(b"__doserrno\0").map(|sym| *sym);
        let _set_doserrno = __library.get(b"_set_doserrno\0").map(|sym| *sym);
        let _get_doserrno = __library.get(b"_get_doserrno\0").map(|sym| *sym);
        let __sys_errlist = __library.get(b"__sys_errlist\0").map(|sym| *sym);
        let __sys_nerr = __library.get(b"__sys_nerr\0").map(|sym| *sym);
        let perror = __library.get(b"perror\0").map(|sym| *sym);
        let __p__pgmptr = __library.get(b"__p__pgmptr\0").map(|sym| *sym);
        let __p__wpgmptr = __library.get(b"__p__wpgmptr\0").map(|sym| *sym);
        let __p__fmode = __library.get(b"__p__fmode\0").map(|sym| *sym);
        let _get_pgmptr = __library.get(b"_get_pgmptr\0").map(|sym| *sym);
        let _get_wpgmptr = __library.get(b"_get_wpgmptr\0").map(|sym| *sym);
        let _set_fmode = __library.get(b"_set_fmode\0").map(|sym| *sym);
        let _get_fmode = __library.get(b"_get_fmode\0").map(|sym| *sym);
        let abs = __library.get(b"abs\0").map(|sym| *sym);
        let labs = __library.get(b"labs\0").map(|sym| *sym);
        let llabs = __library.get(b"llabs\0").map(|sym| *sym);
        let _abs64 = __library.get(b"_abs64\0").map(|sym| *sym);
        let _byteswap_ushort = __library.get(b"_byteswap_ushort\0").map(|sym| *sym);
        let _byteswap_ulong = __library.get(b"_byteswap_ulong\0").map(|sym| *sym);
        let _byteswap_uint64 = __library.get(b"_byteswap_uint64\0").map(|sym| *sym);
        let div = __library.get(b"div\0").map(|sym| *sym);
        let ldiv = __library.get(b"ldiv\0").map(|sym| *sym);
        let lldiv = __library.get(b"lldiv\0").map(|sym| *sym);
        let _rotl = __library.get(b"_rotl\0").map(|sym| *sym);
        let _lrotl = __library.get(b"_lrotl\0").map(|sym| *sym);
        let _rotl64 = __library.get(b"_rotl64\0").map(|sym| *sym);
        let _rotr = __library.get(b"_rotr\0").map(|sym| *sym);
        let _lrotr = __library.get(b"_lrotr\0").map(|sym| *sym);
        let _rotr64 = __library.get(b"_rotr64\0").map(|sym| *sym);
        let srand = __library.get(b"srand\0").map(|sym| *sym);
        let rand = __library.get(b"rand\0").map(|sym| *sym);
        let atof = __library.get(b"atof\0").map(|sym| *sym);
        let atoi = __library.get(b"atoi\0").map(|sym| *sym);
        let atol = __library.get(b"atol\0").map(|sym| *sym);
        let atoll = __library.get(b"atoll\0").map(|sym| *sym);
        let _atoi64 = __library.get(b"_atoi64\0").map(|sym| *sym);
        let _atof_l = __library.get(b"_atof_l\0").map(|sym| *sym);
        let _atoi_l = __library.get(b"_atoi_l\0").map(|sym| *sym);
        let _atol_l = __library.get(b"_atol_l\0").map(|sym| *sym);
        let _atoll_l = __library.get(b"_atoll_l\0").map(|sym| *sym);
        let _atoi64_l = __library.get(b"_atoi64_l\0").map(|sym| *sym);
        let _atoflt = __library.get(b"_atoflt\0").map(|sym| *sym);
        let _atodbl = __library.get(b"_atodbl\0").map(|sym| *sym);
        let _atoldbl = __library.get(b"_atoldbl\0").map(|sym| *sym);
        let _atoflt_l = __library.get(b"_atoflt_l\0").map(|sym| *sym);
        let _atodbl_l = __library.get(b"_atodbl_l\0").map(|sym| *sym);
        let _atoldbl_l = __library.get(b"_atoldbl_l\0").map(|sym| *sym);
        let strtof = __library.get(b"strtof\0").map(|sym| *sym);
        let _strtof_l = __library.get(b"_strtof_l\0").map(|sym| *sym);
        let strtod = __library.get(b"strtod\0").map(|sym| *sym);
        let _strtod_l = __library.get(b"_strtod_l\0").map(|sym| *sym);
        let strtold = __library.get(b"strtold\0").map(|sym| *sym);
        let _strtold_l = __library.get(b"_strtold_l\0").map(|sym| *sym);
        let strtol = __library.get(b"strtol\0").map(|sym| *sym);
        let _strtol_l = __library.get(b"_strtol_l\0").map(|sym| *sym);
        let strtoll = __library.get(b"strtoll\0").map(|sym| *sym);
        let _strtoll_l = __library.get(b"_strtoll_l\0").map(|sym| *sym);
        let strtoul = __library.get(b"strtoul\0").map(|sym| *sym);
        let _strtoul_l = __library.get(b"_strtoul_l\0").map(|sym| *sym);
        let strtoull = __library.get(b"strtoull\0").map(|sym| *sym);
        let _strtoull_l = __library.get(b"_strtoull_l\0").map(|sym| *sym);
        let _strtoi64 = __library.get(b"_strtoi64\0").map(|sym| *sym);
        let _strtoi64_l = __library.get(b"_strtoi64_l\0").map(|sym| *sym);
        let _strtoui64 = __library.get(b"_strtoui64\0").map(|sym| *sym);
        let _strtoui64_l = __library.get(b"_strtoui64_l\0").map(|sym| *sym);
        let _itoa_s = __library.get(b"_itoa_s\0").map(|sym| *sym);
        let _itoa = __library.get(b"_itoa\0").map(|sym| *sym);
        let _ltoa_s = __library.get(b"_ltoa_s\0").map(|sym| *sym);
        let _ltoa = __library.get(b"_ltoa\0").map(|sym| *sym);
        let _ultoa_s = __library.get(b"_ultoa_s\0").map(|sym| *sym);
        let _ultoa = __library.get(b"_ultoa\0").map(|sym| *sym);
        let _i64toa_s = __library.get(b"_i64toa_s\0").map(|sym| *sym);
        let _i64toa = __library.get(b"_i64toa\0").map(|sym| *sym);
        let _ui64toa_s = __library.get(b"_ui64toa_s\0").map(|sym| *sym);
        let _ui64toa = __library.get(b"_ui64toa\0").map(|sym| *sym);
        let _ecvt_s = __library.get(b"_ecvt_s\0").map(|sym| *sym);
        let _ecvt = __library.get(b"_ecvt\0").map(|sym| *sym);
        let _fcvt_s = __library.get(b"_fcvt_s\0").map(|sym| *sym);
        let _fcvt = __library.get(b"_fcvt\0").map(|sym| *sym);
        let _gcvt_s = __library.get(b"_gcvt_s\0").map(|sym| *sym);
        let _gcvt = __library.get(b"_gcvt\0").map(|sym| *sym);
        let ___mb_cur_max_func = __library.get(b"___mb_cur_max_func\0").map(|sym| *sym);
        let ___mb_cur_max_l_func = __library.get(b"___mb_cur_max_l_func\0").map(|sym| *sym);
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let _mblen_l = __library.get(b"_mblen_l\0").map(|sym| *sym);
        let _mbstrlen = __library.get(b"_mbstrlen\0").map(|sym| *sym);
        let _mbstrlen_l = __library.get(b"_mbstrlen_l\0").map(|sym| *sym);
        let _mbstrnlen = __library.get(b"_mbstrnlen\0").map(|sym| *sym);
        let _mbstrnlen_l = __library.get(b"_mbstrnlen_l\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let _mbtowc_l = __library.get(b"_mbtowc_l\0").map(|sym| *sym);
        let mbstowcs_s = __library.get(b"mbstowcs_s\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let _mbstowcs_s_l = __library.get(b"_mbstowcs_s_l\0").map(|sym| *sym);
        let _mbstowcs_l = __library.get(b"_mbstowcs_l\0").map(|sym| *sym);
        let wctomb = __library.get(b"wctomb\0").map(|sym| *sym);
        let _wctomb_l = __library.get(b"_wctomb_l\0").map(|sym| *sym);
        let wctomb_s = __library.get(b"wctomb_s\0").map(|sym| *sym);
        let _wctomb_s_l = __library.get(b"_wctomb_s_l\0").map(|sym| *sym);
        let wcstombs_s = __library.get(b"wcstombs_s\0").map(|sym| *sym);
        let wcstombs = __library.get(b"wcstombs\0").map(|sym| *sym);
        let _wcstombs_s_l = __library.get(b"_wcstombs_s_l\0").map(|sym| *sym);
        let _wcstombs_l = __library.get(b"_wcstombs_l\0").map(|sym| *sym);
        let _fullpath = __library.get(b"_fullpath\0").map(|sym| *sym);
        let _makepath_s = __library.get(b"_makepath_s\0").map(|sym| *sym);
        let _makepath = __library.get(b"_makepath\0").map(|sym| *sym);
        let _splitpath = __library.get(b"_splitpath\0").map(|sym| *sym);
        let _splitpath_s = __library.get(b"_splitpath_s\0").map(|sym| *sym);
        let getenv_s = __library.get(b"getenv_s\0").map(|sym| *sym);
        let __p___argc = __library.get(b"__p___argc\0").map(|sym| *sym);
        let __p___argv = __library.get(b"__p___argv\0").map(|sym| *sym);
        let __p___wargv = __library.get(b"__p___wargv\0").map(|sym| *sym);
        let __p__environ = __library.get(b"__p__environ\0").map(|sym| *sym);
        let __p__wenviron = __library.get(b"__p__wenviron\0").map(|sym| *sym);
        let getenv = __library.get(b"getenv\0").map(|sym| *sym);
        let _dupenv_s = __library.get(b"_dupenv_s\0").map(|sym| *sym);
        let system = __library.get(b"system\0").map(|sym| *sym);
        let _putenv = __library.get(b"_putenv\0").map(|sym| *sym);
        let _putenv_s = __library.get(b"_putenv_s\0").map(|sym| *sym);
        let _searchenv_s = __library.get(b"_searchenv_s\0").map(|sym| *sym);
        let _searchenv = __library.get(b"_searchenv\0").map(|sym| *sym);
        let _seterrormode = __library.get(b"_seterrormode\0").map(|sym| *sym);
        let _beep = __library.get(b"_beep\0").map(|sym| *sym);
        let _sleep = __library.get(b"_sleep\0").map(|sym| *sym);
        let ecvt = __library.get(b"ecvt\0").map(|sym| *sym);
        let fcvt = __library.get(b"fcvt\0").map(|sym| *sym);
        let gcvt = __library.get(b"gcvt\0").map(|sym| *sym);
        let itoa = __library.get(b"itoa\0").map(|sym| *sym);
        let ltoa = __library.get(b"ltoa\0").map(|sym| *sym);
        let swab = __library.get(b"swab\0").map(|sym| *sym);
        let ultoa = __library.get(b"ultoa\0").map(|sym| *sym);
        let putenv = __library.get(b"putenv\0").map(|sym| *sym);
        let onexit = __library.get(b"onexit\0").map(|sym| *sym);
        let memchr = __library.get(b"memchr\0").map(|sym| *sym);
        let memcmp = __library.get(b"memcmp\0").map(|sym| *sym);
        let memcpy = __library.get(b"memcpy\0").map(|sym| *sym);
        let memmove = __library.get(b"memmove\0").map(|sym| *sym);
        let memset = __library.get(b"memset\0").map(|sym| *sym);
        let strchr = __library.get(b"strchr\0").map(|sym| *sym);
        let strrchr = __library.get(b"strrchr\0").map(|sym| *sym);
        let strstr = __library.get(b"strstr\0").map(|sym| *sym);
        let wcschr = __library.get(b"wcschr\0").map(|sym| *sym);
        let wcsrchr = __library.get(b"wcsrchr\0").map(|sym| *sym);
        let wcsstr = __library.get(b"wcsstr\0").map(|sym| *sym);
        let _memicmp = __library.get(b"_memicmp\0").map(|sym| *sym);
        let _memicmp_l = __library.get(b"_memicmp_l\0").map(|sym| *sym);
        let memccpy = __library.get(b"memccpy\0").map(|sym| *sym);
        let memicmp = __library.get(b"memicmp\0").map(|sym| *sym);
        let wcscat_s = __library.get(b"wcscat_s\0").map(|sym| *sym);
        let wcscpy_s = __library.get(b"wcscpy_s\0").map(|sym| *sym);
        let wcsncat_s = __library.get(b"wcsncat_s\0").map(|sym| *sym);
        let wcsncpy_s = __library.get(b"wcsncpy_s\0").map(|sym| *sym);
        let wcstok_s = __library.get(b"wcstok_s\0").map(|sym| *sym);
        let _wcsdup = __library.get(b"_wcsdup\0").map(|sym| *sym);
        let wcscat = __library.get(b"wcscat\0").map(|sym| *sym);
        let wcscmp = __library.get(b"wcscmp\0").map(|sym| *sym);
        let wcscpy = __library.get(b"wcscpy\0").map(|sym| *sym);
        let wcscspn = __library.get(b"wcscspn\0").map(|sym| *sym);
        let wcslen = __library.get(b"wcslen\0").map(|sym| *sym);
        let wcsnlen = __library.get(b"wcsnlen\0").map(|sym| *sym);
        let wcsncat = __library.get(b"wcsncat\0").map(|sym| *sym);
        let wcsncmp = __library.get(b"wcsncmp\0").map(|sym| *sym);
        let wcsncpy = __library.get(b"wcsncpy\0").map(|sym| *sym);
        let wcspbrk = __library.get(b"wcspbrk\0").map(|sym| *sym);
        let wcsspn = __library.get(b"wcsspn\0").map(|sym| *sym);
        let wcstok = __library.get(b"wcstok\0").map(|sym| *sym);
        let _wcserror = __library.get(b"_wcserror\0").map(|sym| *sym);
        let _wcserror_s = __library.get(b"_wcserror_s\0").map(|sym| *sym);
        let __wcserror = __library.get(b"__wcserror\0").map(|sym| *sym);
        let __wcserror_s = __library.get(b"__wcserror_s\0").map(|sym| *sym);
        let _wcsicmp = __library.get(b"_wcsicmp\0").map(|sym| *sym);
        let _wcsicmp_l = __library.get(b"_wcsicmp_l\0").map(|sym| *sym);
        let _wcsnicmp = __library.get(b"_wcsnicmp\0").map(|sym| *sym);
        let _wcsnicmp_l = __library.get(b"_wcsnicmp_l\0").map(|sym| *sym);
        let _wcsnset_s = __library.get(b"_wcsnset_s\0").map(|sym| *sym);
        let _wcsnset = __library.get(b"_wcsnset\0").map(|sym| *sym);
        let _wcsrev = __library.get(b"_wcsrev\0").map(|sym| *sym);
        let _wcsset_s = __library.get(b"_wcsset_s\0").map(|sym| *sym);
        let _wcsset = __library.get(b"_wcsset\0").map(|sym| *sym);
        let _wcslwr_s = __library.get(b"_wcslwr_s\0").map(|sym| *sym);
        let _wcslwr = __library.get(b"_wcslwr\0").map(|sym| *sym);
        let _wcslwr_s_l = __library.get(b"_wcslwr_s_l\0").map(|sym| *sym);
        let _wcslwr_l = __library.get(b"_wcslwr_l\0").map(|sym| *sym);
        let _wcsupr_s = __library.get(b"_wcsupr_s\0").map(|sym| *sym);
        let _wcsupr = __library.get(b"_wcsupr\0").map(|sym| *sym);
        let _wcsupr_s_l = __library.get(b"_wcsupr_s_l\0").map(|sym| *sym);
        let _wcsupr_l = __library.get(b"_wcsupr_l\0").map(|sym| *sym);
        let wcsxfrm = __library.get(b"wcsxfrm\0").map(|sym| *sym);
        let _wcsxfrm_l = __library.get(b"_wcsxfrm_l\0").map(|sym| *sym);
        let wcscoll = __library.get(b"wcscoll\0").map(|sym| *sym);
        let _wcscoll_l = __library.get(b"_wcscoll_l\0").map(|sym| *sym);
        let _wcsicoll = __library.get(b"_wcsicoll\0").map(|sym| *sym);
        let _wcsicoll_l = __library.get(b"_wcsicoll_l\0").map(|sym| *sym);
        let _wcsncoll = __library.get(b"_wcsncoll\0").map(|sym| *sym);
        let _wcsncoll_l = __library.get(b"_wcsncoll_l\0").map(|sym| *sym);
        let _wcsnicoll = __library.get(b"_wcsnicoll\0").map(|sym| *sym);
        let _wcsnicoll_l = __library.get(b"_wcsnicoll_l\0").map(|sym| *sym);
        let wcsdup = __library.get(b"wcsdup\0").map(|sym| *sym);
        let wcsicmp = __library.get(b"wcsicmp\0").map(|sym| *sym);
        let wcsnicmp = __library.get(b"wcsnicmp\0").map(|sym| *sym);
        let wcsnset = __library.get(b"wcsnset\0").map(|sym| *sym);
        let wcsrev = __library.get(b"wcsrev\0").map(|sym| *sym);
        let wcsset = __library.get(b"wcsset\0").map(|sym| *sym);
        let wcslwr = __library.get(b"wcslwr\0").map(|sym| *sym);
        let wcsupr = __library.get(b"wcsupr\0").map(|sym| *sym);
        let wcsicoll = __library.get(b"wcsicoll\0").map(|sym| *sym);
        let strcpy_s = __library.get(b"strcpy_s\0").map(|sym| *sym);
        let strcat_s = __library.get(b"strcat_s\0").map(|sym| *sym);
        let strerror_s = __library.get(b"strerror_s\0").map(|sym| *sym);
        let strncat_s = __library.get(b"strncat_s\0").map(|sym| *sym);
        let strncpy_s = __library.get(b"strncpy_s\0").map(|sym| *sym);
        let strtok_s = __library.get(b"strtok_s\0").map(|sym| *sym);
        let _memccpy = __library.get(b"_memccpy\0").map(|sym| *sym);
        let strcat = __library.get(b"strcat\0").map(|sym| *sym);
        let strcmp = __library.get(b"strcmp\0").map(|sym| *sym);
        let _strcmpi = __library.get(b"_strcmpi\0").map(|sym| *sym);
        let strcoll = __library.get(b"strcoll\0").map(|sym| *sym);
        let _strcoll_l = __library.get(b"_strcoll_l\0").map(|sym| *sym);
        let strcpy = __library.get(b"strcpy\0").map(|sym| *sym);
        let strcspn = __library.get(b"strcspn\0").map(|sym| *sym);
        let _strdup = __library.get(b"_strdup\0").map(|sym| *sym);
        let _strerror = __library.get(b"_strerror\0").map(|sym| *sym);
        let _strerror_s = __library.get(b"_strerror_s\0").map(|sym| *sym);
        let strerror = __library.get(b"strerror\0").map(|sym| *sym);
        let _stricmp = __library.get(b"_stricmp\0").map(|sym| *sym);
        let _stricoll = __library.get(b"_stricoll\0").map(|sym| *sym);
        let _stricoll_l = __library.get(b"_stricoll_l\0").map(|sym| *sym);
        let _stricmp_l = __library.get(b"_stricmp_l\0").map(|sym| *sym);
        let strlen = __library.get(b"strlen\0").map(|sym| *sym);
        let _strlwr_s = __library.get(b"_strlwr_s\0").map(|sym| *sym);
        let _strlwr = __library.get(b"_strlwr\0").map(|sym| *sym);
        let _strlwr_s_l = __library.get(b"_strlwr_s_l\0").map(|sym| *sym);
        let _strlwr_l = __library.get(b"_strlwr_l\0").map(|sym| *sym);
        let strncat = __library.get(b"strncat\0").map(|sym| *sym);
        let strncmp = __library.get(b"strncmp\0").map(|sym| *sym);
        let _strnicmp = __library.get(b"_strnicmp\0").map(|sym| *sym);
        let _strnicmp_l = __library.get(b"_strnicmp_l\0").map(|sym| *sym);
        let _strnicoll = __library.get(b"_strnicoll\0").map(|sym| *sym);
        let _strnicoll_l = __library.get(b"_strnicoll_l\0").map(|sym| *sym);
        let _strncoll = __library.get(b"_strncoll\0").map(|sym| *sym);
        let _strncoll_l = __library.get(b"_strncoll_l\0").map(|sym| *sym);
        let __strncnt = __library.get(b"__strncnt\0").map(|sym| *sym);
        let strncpy = __library.get(b"strncpy\0").map(|sym| *sym);
        let strnlen = __library.get(b"strnlen\0").map(|sym| *sym);
        let _strnset_s = __library.get(b"_strnset_s\0").map(|sym| *sym);
        let _strnset = __library.get(b"_strnset\0").map(|sym| *sym);
        let strpbrk = __library.get(b"strpbrk\0").map(|sym| *sym);
        let _strrev = __library.get(b"_strrev\0").map(|sym| *sym);
        let _strset_s = __library.get(b"_strset_s\0").map(|sym| *sym);
        let _strset = __library.get(b"_strset\0").map(|sym| *sym);
        let strspn = __library.get(b"strspn\0").map(|sym| *sym);
        let strtok = __library.get(b"strtok\0").map(|sym| *sym);
        let _strupr_s = __library.get(b"_strupr_s\0").map(|sym| *sym);
        let _strupr = __library.get(b"_strupr\0").map(|sym| *sym);
        let _strupr_s_l = __library.get(b"_strupr_s_l\0").map(|sym| *sym);
        let _strupr_l = __library.get(b"_strupr_l\0").map(|sym| *sym);
        let strxfrm = __library.get(b"strxfrm\0").map(|sym| *sym);
        let _strxfrm_l = __library.get(b"_strxfrm_l\0").map(|sym| *sym);
        let strdup = __library.get(b"strdup\0").map(|sym| *sym);
        let strcmpi = __library.get(b"strcmpi\0").map(|sym| *sym);
        let stricmp = __library.get(b"stricmp\0").map(|sym| *sym);
        let strlwr = __library.get(b"strlwr\0").map(|sym| *sym);
        let strnicmp = __library.get(b"strnicmp\0").map(|sym| *sym);
        let strnset = __library.get(b"strnset\0").map(|sym| *sym);
        let strrev = __library.get(b"strrev\0").map(|sym| *sym);
        let strset = __library.get(b"strset\0").map(|sym| *sym);
        let strupr = __library.get(b"strupr\0").map(|sym| *sym);
        let OrtGetApiBase = __library.get(b"OrtGetApiBase\0").map(|sym| *sym);
        let OrtSessionOptionsAppendExecutionProvider_CUDA = __library
            .get(b"OrtSessionOptionsAppendExecutionProvider_CUDA\0")
            .map(|sym| *sym);
        let OrtSessionOptionsAppendExecutionProvider_MIGraphX = __library
            .get(b"OrtSessionOptionsAppendExecutionProvider_MIGraphX\0")
            .map(|sym| *sym);
        Ok(onnxruntime {
            __library,
            __va_start,
            __security_init_cookie,
            __security_check_cookie,
            __report_gsfailure,
            _invalid_parameter_noinfo,
            _invalid_parameter_noinfo_noreturn,
            _invoke_watson,
            _calloc_base,
            calloc,
            _callnewh,
            _expand,
            _free_base,
            free,
            _malloc_base,
            malloc,
            _msize_base,
            _msize,
            _realloc_base,
            realloc,
            _recalloc_base,
            _recalloc,
            _aligned_free,
            _aligned_malloc,
            _aligned_offset_malloc,
            _aligned_msize,
            _aligned_offset_realloc,
            _aligned_offset_recalloc,
            _aligned_realloc,
            _aligned_recalloc,
            bsearch_s,
            qsort_s,
            bsearch,
            qsort,
            _lfind_s,
            _lfind,
            _lsearch_s,
            _lsearch,
            lfind,
            lsearch,
            _itow_s,
            _itow,
            _ltow_s,
            _ltow,
            _ultow_s,
            _ultow,
            wcstod,
            _wcstod_l,
            wcstol,
            _wcstol_l,
            wcstoll,
            _wcstoll_l,
            wcstoul,
            _wcstoul_l,
            wcstoull,
            _wcstoull_l,
            wcstold,
            _wcstold_l,
            wcstof,
            _wcstof_l,
            _wtof,
            _wtof_l,
            _wtoi,
            _wtoi_l,
            _wtol,
            _wtol_l,
            _wtoll,
            _wtoll_l,
            _i64tow_s,
            _i64tow,
            _ui64tow_s,
            _ui64tow,
            _wtoi64,
            _wtoi64_l,
            _wcstoi64,
            _wcstoi64_l,
            _wcstoui64,
            _wcstoui64_l,
            _wfullpath,
            _wmakepath_s,
            _wmakepath,
            _wperror,
            _wsplitpath,
            _wsplitpath_s,
            _wdupenv_s,
            _wgetenv,
            _wgetenv_s,
            _wputenv,
            _wputenv_s,
            _wsearchenv_s,
            _wsearchenv,
            _wsystem,
            _swab,
            exit,
            _exit,
            _Exit,
            quick_exit,
            abort,
            _set_abort_behavior,
            atexit,
            _onexit,
            at_quick_exit,
            _set_purecall_handler,
            _get_purecall_handler,
            _set_invalid_parameter_handler,
            _get_invalid_parameter_handler,
            _set_thread_local_invalid_parameter_handler,
            _get_thread_local_invalid_parameter_handler,
            _set_error_mode,
            _errno,
            _set_errno,
            _get_errno,
            __doserrno,
            _set_doserrno,
            _get_doserrno,
            __sys_errlist,
            __sys_nerr,
            perror,
            __p__pgmptr,
            __p__wpgmptr,
            __p__fmode,
            _get_pgmptr,
            _get_wpgmptr,
            _set_fmode,
            _get_fmode,
            abs,
            labs,
            llabs,
            _abs64,
            _byteswap_ushort,
            _byteswap_ulong,
            _byteswap_uint64,
            div,
            ldiv,
            lldiv,
            _rotl,
            _lrotl,
            _rotl64,
            _rotr,
            _lrotr,
            _rotr64,
            srand,
            rand,
            atof,
            atoi,
            atol,
            atoll,
            _atoi64,
            _atof_l,
            _atoi_l,
            _atol_l,
            _atoll_l,
            _atoi64_l,
            _atoflt,
            _atodbl,
            _atoldbl,
            _atoflt_l,
            _atodbl_l,
            _atoldbl_l,
            strtof,
            _strtof_l,
            strtod,
            _strtod_l,
            strtold,
            _strtold_l,
            strtol,
            _strtol_l,
            strtoll,
            _strtoll_l,
            strtoul,
            _strtoul_l,
            strtoull,
            _strtoull_l,
            _strtoi64,
            _strtoi64_l,
            _strtoui64,
            _strtoui64_l,
            _itoa_s,
            _itoa,
            _ltoa_s,
            _ltoa,
            _ultoa_s,
            _ultoa,
            _i64toa_s,
            _i64toa,
            _ui64toa_s,
            _ui64toa,
            _ecvt_s,
            _ecvt,
            _fcvt_s,
            _fcvt,
            _gcvt_s,
            _gcvt,
            ___mb_cur_max_func,
            ___mb_cur_max_l_func,
            mblen,
            _mblen_l,
            _mbstrlen,
            _mbstrlen_l,
            _mbstrnlen,
            _mbstrnlen_l,
            mbtowc,
            _mbtowc_l,
            mbstowcs_s,
            mbstowcs,
            _mbstowcs_s_l,
            _mbstowcs_l,
            wctomb,
            _wctomb_l,
            wctomb_s,
            _wctomb_s_l,
            wcstombs_s,
            wcstombs,
            _wcstombs_s_l,
            _wcstombs_l,
            _fullpath,
            _makepath_s,
            _makepath,
            _splitpath,
            _splitpath_s,
            getenv_s,
            __p___argc,
            __p___argv,
            __p___wargv,
            __p__environ,
            __p__wenviron,
            getenv,
            _dupenv_s,
            system,
            _putenv,
            _putenv_s,
            _searchenv_s,
            _searchenv,
            _seterrormode,
            _beep,
            _sleep,
            ecvt,
            fcvt,
            gcvt,
            itoa,
            ltoa,
            swab,
            ultoa,
            putenv,
            onexit,
            memchr,
            memcmp,
            memcpy,
            memmove,
            memset,
            strchr,
            strrchr,
            strstr,
            wcschr,
            wcsrchr,
            wcsstr,
            _memicmp,
            _memicmp_l,
            memccpy,
            memicmp,
            wcscat_s,
            wcscpy_s,
            wcsncat_s,
            wcsncpy_s,
            wcstok_s,
            _wcsdup,
            wcscat,
            wcscmp,
            wcscpy,
            wcscspn,
            wcslen,
            wcsnlen,
            wcsncat,
            wcsncmp,
            wcsncpy,
            wcspbrk,
            wcsspn,
            wcstok,
            _wcserror,
            _wcserror_s,
            __wcserror,
            __wcserror_s,
            _wcsicmp,
            _wcsicmp_l,
            _wcsnicmp,
            _wcsnicmp_l,
            _wcsnset_s,
            _wcsnset,
            _wcsrev,
            _wcsset_s,
            _wcsset,
            _wcslwr_s,
            _wcslwr,
            _wcslwr_s_l,
            _wcslwr_l,
            _wcsupr_s,
            _wcsupr,
            _wcsupr_s_l,
            _wcsupr_l,
            wcsxfrm,
            _wcsxfrm_l,
            wcscoll,
            _wcscoll_l,
            _wcsicoll,
            _wcsicoll_l,
            _wcsncoll,
            _wcsncoll_l,
            _wcsnicoll,
            _wcsnicoll_l,
            wcsdup,
            wcsicmp,
            wcsnicmp,
            wcsnset,
            wcsrev,
            wcsset,
            wcslwr,
            wcsupr,
            wcsicoll,
            strcpy_s,
            strcat_s,
            strerror_s,
            strncat_s,
            strncpy_s,
            strtok_s,
            _memccpy,
            strcat,
            strcmp,
            _strcmpi,
            strcoll,
            _strcoll_l,
            strcpy,
            strcspn,
            _strdup,
            _strerror,
            _strerror_s,
            strerror,
            _stricmp,
            _stricoll,
            _stricoll_l,
            _stricmp_l,
            strlen,
            _strlwr_s,
            _strlwr,
            _strlwr_s_l,
            _strlwr_l,
            strncat,
            strncmp,
            _strnicmp,
            _strnicmp_l,
            _strnicoll,
            _strnicoll_l,
            _strncoll,
            _strncoll_l,
            __strncnt,
            strncpy,
            strnlen,
            _strnset_s,
            _strnset,
            strpbrk,
            _strrev,
            _strset_s,
            _strset,
            strspn,
            strtok,
            _strupr_s,
            _strupr,
            _strupr_s_l,
            _strupr_l,
            strxfrm,
            _strxfrm_l,
            strdup,
            strcmpi,
            stricmp,
            strlwr,
            strnicmp,
            strnset,
            strrev,
            strset,
            strupr,
            OrtGetApiBase,
            OrtSessionOptionsAppendExecutionProvider_CUDA,
            OrtSessionOptionsAppendExecutionProvider_MIGraphX,
        })
    }
    pub unsafe fn __security_init_cookie(&self) -> () {
        (self
            .__security_init_cookie
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __security_check_cookie(&self, _StackCookie: usize) -> () {
        (self
            .__security_check_cookie
            .as_ref()
            .expect("Expected function, got error."))(_StackCookie)
    }
    pub unsafe fn __report_gsfailure(&self, _StackCookie: usize) -> () {
        (self
            .__report_gsfailure
            .as_ref()
            .expect("Expected function, got error."))(_StackCookie)
    }
    pub unsafe fn _invalid_parameter_noinfo(&self) -> () {
        (self
            ._invalid_parameter_noinfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _invalid_parameter_noinfo_noreturn(&self) -> () {
        (self
            ._invalid_parameter_noinfo_noreturn
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _invoke_watson(
        &self,
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> () {
        (self
            ._invoke_watson
            .as_ref()
            .expect("Expected function, got error."))(
            _Expression,
            _FunctionName,
            _FileName,
            _LineNo,
            _Reserved,
        )
    }
    pub unsafe fn _calloc_base(&self, _Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void {
        (self
            ._calloc_base
            .as_ref()
            .expect("Expected function, got error."))(_Count, _Size)
    }
    pub unsafe fn calloc(
        &self,
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self.calloc.as_ref().expect("Expected function, got error."))(_Count, _Size)
    }
    pub unsafe fn _callnewh(&self, _Size: usize) -> ::std::os::raw::c_int {
        (self
            ._callnewh
            .as_ref()
            .expect("Expected function, got error."))(_Size)
    }
    pub unsafe fn _expand(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._expand
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Size)
    }
    pub unsafe fn _free_base(&self, _Block: *mut ::std::os::raw::c_void) -> () {
        (self
            ._free_base
            .as_ref()
            .expect("Expected function, got error."))(_Block)
    }
    pub unsafe fn free(&self, _Block: *mut ::std::os::raw::c_void) -> () {
        (self.free.as_ref().expect("Expected function, got error."))(_Block)
    }
    pub unsafe fn _malloc_base(&self, _Size: usize) -> *mut ::std::os::raw::c_void {
        (self
            ._malloc_base
            .as_ref()
            .expect("Expected function, got error."))(_Size)
    }
    pub unsafe fn malloc(&self, _Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void {
        (self.malloc.as_ref().expect("Expected function, got error."))(_Size)
    }
    pub unsafe fn _msize_base(&self, _Block: *mut ::std::os::raw::c_void) -> usize {
        (self
            ._msize_base
            .as_ref()
            .expect("Expected function, got error."))(_Block)
    }
    pub unsafe fn _msize(&self, _Block: *mut ::std::os::raw::c_void) -> usize {
        (self._msize.as_ref().expect("Expected function, got error."))(_Block)
    }
    pub unsafe fn _realloc_base(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._realloc_base
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Size)
    }
    pub unsafe fn realloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .realloc
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Size)
    }
    pub unsafe fn _recalloc_base(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._recalloc_base
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Count, _Size)
    }
    pub unsafe fn _recalloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._recalloc
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Count, _Size)
    }
    pub unsafe fn _aligned_free(&self, _Block: *mut ::std::os::raw::c_void) -> () {
        (self
            ._aligned_free
            .as_ref()
            .expect("Expected function, got error."))(_Block)
    }
    pub unsafe fn _aligned_malloc(
        &self,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_malloc
            .as_ref()
            .expect("Expected function, got error."))(_Size, _Alignment)
    }
    pub unsafe fn _aligned_offset_malloc(
        &self,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_offset_malloc
            .as_ref()
            .expect("Expected function, got error."))(_Size, _Alignment, _Offset)
    }
    pub unsafe fn _aligned_msize(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize {
        (self
            ._aligned_msize
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Alignment, _Offset)
    }
    pub unsafe fn _aligned_offset_realloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_offset_realloc
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Size, _Alignment, _Offset)
    }
    pub unsafe fn _aligned_offset_recalloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_offset_recalloc
            .as_ref()
            .expect("Expected function, got error."))(
            _Block, _Count, _Size, _Alignment, _Offset
        )
    }
    pub unsafe fn _aligned_realloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_realloc
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Size, _Alignment)
    }
    pub unsafe fn _aligned_recalloc(
        &self,
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._aligned_recalloc
            .as_ref()
            .expect("Expected function, got error."))(_Block, _Count, _Size, _Alignment)
    }
    pub unsafe fn bsearch_s(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .bsearch_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context,
        )
    }
    pub unsafe fn qsort_s(
        &self,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> () {
        (self
            .qsort_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context,
        )
    }
    pub unsafe fn bsearch(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .bsearch
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn qsort(
        &self,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> () {
        (self.qsort.as_ref().expect("Expected function, got error."))(
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn _lfind_s(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._lfind_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context,
        )
    }
    pub unsafe fn _lfind(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void {
        (self._lfind.as_ref().expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn _lsearch_s(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._lsearch_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context,
        )
    }
    pub unsafe fn _lsearch(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._lsearch
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn lfind(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void {
        (self.lfind.as_ref().expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn lsearch(
        &self,
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .lsearch
            .as_ref()
            .expect("Expected function, got error."))(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
        )
    }
    pub unsafe fn _itow_s(
        &self,
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._itow_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _itow(
        &self,
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t {
        (self._itow.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ltow_s(
        &self,
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ltow_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ltow(
        &self,
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t {
        (self._ltow.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ultow_s(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ultow_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ultow(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t {
        (self._ultow.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn wcstod(&self, _String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64 {
        (self.wcstod.as_ref().expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _wcstod_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64 {
        (self
            ._wcstod_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn wcstol(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self.wcstol.as_ref().expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstol_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long {
        (self
            ._wcstol_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn wcstoll(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .wcstoll
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstoll_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._wcstoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn wcstoul(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .wcstoul
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstoul_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong {
        (self
            ._wcstoul_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn wcstoull(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .wcstoull
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstoull_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._wcstoull_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn wcstold(&self, _String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64 {
        (self
            .wcstold
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _wcstold_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64 {
        (self
            ._wcstold_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn wcstof(&self, _String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32 {
        (self.wcstof.as_ref().expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _wcstof_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32 {
        (self
            ._wcstof_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn _wtof(&self, _String: *const wchar_t) -> f64 {
        (self._wtof.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wtof_l(&self, _String: *const wchar_t, _Locale: _locale_t) -> f64 {
        (self
            ._wtof_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _wtoi(&self, _String: *const wchar_t) -> ::std::os::raw::c_int {
        (self._wtoi.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wtoi_l(
        &self,
        _String: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wtoi_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _wtol(&self, _String: *const wchar_t) -> ::std::os::raw::c_long {
        (self._wtol.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wtol_l(
        &self,
        _String: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long {
        (self
            ._wtol_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _wtoll(&self, _String: *const wchar_t) -> ::std::os::raw::c_longlong {
        (self._wtoll.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wtoll_l(
        &self,
        _String: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._wtoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _i64tow_s(
        &self,
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._i64tow_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _i64tow(
        &self,
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t {
        (self
            ._i64tow
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ui64tow_s(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ui64tow_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ui64tow(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t {
        (self
            ._ui64tow
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _wtoi64(&self, _String: *const wchar_t) -> ::std::os::raw::c_longlong {
        (self
            ._wtoi64
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wtoi64_l(
        &self,
        _String: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._wtoi64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _wcstoi64(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._wcstoi64
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstoi64_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._wcstoi64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn _wcstoui64(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._wcstoui64
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _wcstoui64_l(
        &self,
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._wcstoui64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn _wfullpath(
        &self,
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t {
        (self
            ._wfullpath
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _Path, _BufferCount)
    }
    pub unsafe fn _wmakepath_s(
        &self,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t {
        (self
            ._wmakepath_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Buffer,
            _BufferCount,
            _Drive,
            _Dir,
            _Filename,
            _Ext,
        )
    }
    pub unsafe fn _wmakepath(
        &self,
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> () {
        (self
            ._wmakepath
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _Drive, _Dir, _Filename, _Ext)
    }
    pub unsafe fn _wperror(&self, _ErrorMessage: *const wchar_t) -> () {
        (self
            ._wperror
            .as_ref()
            .expect("Expected function, got error."))(_ErrorMessage)
    }
    pub unsafe fn _wsplitpath(
        &self,
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    ) -> () {
        (self
            ._wsplitpath
            .as_ref()
            .expect("Expected function, got error."))(
            _FullPath, _Drive, _Dir, _Filename, _Ext
        )
    }
    pub unsafe fn _wsplitpath_s(
        &self,
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t {
        (self
            ._wsplitpath_s
            .as_ref()
            .expect("Expected function, got error."))(
            _FullPath,
            _Drive,
            _DriveCount,
            _Dir,
            _DirCount,
            _Filename,
            _FilenameCount,
            _Ext,
            _ExtCount,
        )
    }
    pub unsafe fn _wdupenv_s(
        &self,
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t {
        (self
            ._wdupenv_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _BufferCount, _VarName)
    }
    pub unsafe fn _wgetenv(&self, _VarName: *const wchar_t) -> *mut wchar_t {
        (self
            ._wgetenv
            .as_ref()
            .expect("Expected function, got error."))(_VarName)
    }
    pub unsafe fn _wgetenv_s(
        &self,
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t {
        (self
            ._wgetenv_s
            .as_ref()
            .expect("Expected function, got error."))(
            _RequiredCount,
            _Buffer,
            _BufferCount,
            _VarName,
        )
    }
    pub unsafe fn _wputenv(&self, _EnvString: *const wchar_t) -> ::std::os::raw::c_int {
        (self
            ._wputenv
            .as_ref()
            .expect("Expected function, got error."))(_EnvString)
    }
    pub unsafe fn _wputenv_s(&self, _Name: *const wchar_t, _Value: *const wchar_t) -> errno_t {
        (self
            ._wputenv_s
            .as_ref()
            .expect("Expected function, got error."))(_Name, _Value)
    }
    pub unsafe fn _wsearchenv_s(
        &self,
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t {
        (self
            ._wsearchenv_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Filename, _VarName, _Buffer, _BufferCount
        )
    }
    pub unsafe fn _wsearchenv(
        &self,
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    ) -> () {
        (self
            ._wsearchenv
            .as_ref()
            .expect("Expected function, got error."))(_Filename, _VarName, _ResultPath)
    }
    pub unsafe fn _wsystem(&self, _Command: *const wchar_t) -> ::std::os::raw::c_int {
        (self
            ._wsystem
            .as_ref()
            .expect("Expected function, got error."))(_Command)
    }
    pub unsafe fn _swab(
        &self,
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    ) -> () {
        (self._swab.as_ref().expect("Expected function, got error."))(_Buf1, _Buf2, _SizeInBytes)
    }
    pub unsafe fn exit(&self, _Code: ::std::os::raw::c_int) -> () {
        (self.exit.as_ref().expect("Expected function, got error."))(_Code)
    }
    pub unsafe fn _exit(&self, _Code: ::std::os::raw::c_int) -> () {
        (self._exit.as_ref().expect("Expected function, got error."))(_Code)
    }
    pub unsafe fn _Exit(&self, _Code: ::std::os::raw::c_int) -> () {
        (self._Exit.as_ref().expect("Expected function, got error."))(_Code)
    }
    pub unsafe fn quick_exit(&self, _Code: ::std::os::raw::c_int) -> () {
        (self
            .quick_exit
            .as_ref()
            .expect("Expected function, got error."))(_Code)
    }
    pub unsafe fn abort(&self) -> () {
        (self.abort.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn _set_abort_behavior(
        &self,
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            ._set_abort_behavior
            .as_ref()
            .expect("Expected function, got error."))(_Flags, _Mask)
    }
    pub unsafe fn atexit(
        &self,
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self.atexit.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _onexit(&self, _Func: _onexit_t) -> _onexit_t {
        (self
            ._onexit
            .as_ref()
            .expect("Expected function, got error."))(_Func)
    }
    pub unsafe fn at_quick_exit(
        &self,
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .at_quick_exit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _set_purecall_handler(&self, _Handler: _purecall_handler) -> _purecall_handler {
        (self
            ._set_purecall_handler
            .as_ref()
            .expect("Expected function, got error."))(_Handler)
    }
    pub unsafe fn _get_purecall_handler(&self) -> _purecall_handler {
        (self
            ._get_purecall_handler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _set_invalid_parameter_handler(
        &self,
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler {
        (self
            ._set_invalid_parameter_handler
            .as_ref()
            .expect("Expected function, got error."))(_Handler)
    }
    pub unsafe fn _get_invalid_parameter_handler(&self) -> _invalid_parameter_handler {
        (self
            ._get_invalid_parameter_handler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _set_thread_local_invalid_parameter_handler(
        &self,
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler {
        (self
            ._set_thread_local_invalid_parameter_handler
            .as_ref()
            .expect("Expected function, got error."))(_Handler)
    }
    pub unsafe fn _get_thread_local_invalid_parameter_handler(&self) -> _invalid_parameter_handler {
        (self
            ._get_thread_local_invalid_parameter_handler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _set_error_mode(&self, _Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._set_error_mode
            .as_ref()
            .expect("Expected function, got error."))(_Mode)
    }
    pub unsafe fn _errno(&self) -> *mut ::std::os::raw::c_int {
        (self._errno.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn _set_errno(&self, _Value: ::std::os::raw::c_int) -> errno_t {
        (self
            ._set_errno
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn _get_errno(&self, _Value: *mut ::std::os::raw::c_int) -> errno_t {
        (self
            ._get_errno
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn __doserrno(&self) -> *mut ::std::os::raw::c_ulong {
        (self
            .__doserrno
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _set_doserrno(&self, _Value: ::std::os::raw::c_ulong) -> errno_t {
        (self
            ._set_doserrno
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn _get_doserrno(&self, _Value: *mut ::std::os::raw::c_ulong) -> errno_t {
        (self
            ._get_doserrno
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn __sys_errlist(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .__sys_errlist
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __sys_nerr(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__sys_nerr
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn perror(&self, _ErrMsg: *const ::std::os::raw::c_char) -> () {
        (self.perror.as_ref().expect("Expected function, got error."))(_ErrMsg)
    }
    pub unsafe fn __p__pgmptr(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .__p__pgmptr
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p__wpgmptr(&self) -> *mut *mut wchar_t {
        (self
            .__p__wpgmptr
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p__fmode(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__p__fmode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn _get_pgmptr(&self, _Value: *mut *mut ::std::os::raw::c_char) -> errno_t {
        (self
            ._get_pgmptr
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn _get_wpgmptr(&self, _Value: *mut *mut wchar_t) -> errno_t {
        (self
            ._get_wpgmptr
            .as_ref()
            .expect("Expected function, got error."))(_Value)
    }
    pub unsafe fn _set_fmode(&self, _Mode: ::std::os::raw::c_int) -> errno_t {
        (self
            ._set_fmode
            .as_ref()
            .expect("Expected function, got error."))(_Mode)
    }
    pub unsafe fn _get_fmode(&self, _PMode: *mut ::std::os::raw::c_int) -> errno_t {
        (self
            ._get_fmode
            .as_ref()
            .expect("Expected function, got error."))(_PMode)
    }
    pub unsafe fn abs(&self, _Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.abs.as_ref().expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn labs(&self, _Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long {
        (self.labs.as_ref().expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn llabs(&self, _Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        (self.llabs.as_ref().expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn _abs64(&self, _Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        (self._abs64.as_ref().expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn _byteswap_ushort(
        &self,
        _Number: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ushort {
        (self
            ._byteswap_ushort
            .as_ref()
            .expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn _byteswap_ulong(
        &self,
        _Number: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        (self
            ._byteswap_ulong
            .as_ref()
            .expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn _byteswap_uint64(
        &self,
        _Number: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._byteswap_uint64
            .as_ref()
            .expect("Expected function, got error."))(_Number)
    }
    pub unsafe fn div(
        &self,
        _Numerator: ::std::os::raw::c_int,
        _Denominator: ::std::os::raw::c_int,
    ) -> div_t {
        (self.div.as_ref().expect("Expected function, got error."))(_Numerator, _Denominator)
    }
    pub unsafe fn ldiv(
        &self,
        _Numerator: ::std::os::raw::c_long,
        _Denominator: ::std::os::raw::c_long,
    ) -> ldiv_t {
        (self.ldiv.as_ref().expect("Expected function, got error."))(_Numerator, _Denominator)
    }
    pub unsafe fn lldiv(
        &self,
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t {
        (self.lldiv.as_ref().expect("Expected function, got error."))(_Numerator, _Denominator)
    }
    pub unsafe fn _rotl(
        &self,
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self._rotl.as_ref().expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn _lrotl(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self._lrotl.as_ref().expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn _rotl64(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._rotl64
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn _rotr(
        &self,
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self._rotr.as_ref().expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn _lrotr(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self._lrotr.as_ref().expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn _rotr64(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._rotr64
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Shift)
    }
    pub unsafe fn srand(&self, _Seed: ::std::os::raw::c_uint) -> () {
        (self.srand.as_ref().expect("Expected function, got error."))(_Seed)
    }
    pub unsafe fn rand(&self) -> ::std::os::raw::c_int {
        (self.rand.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn atof(&self, _String: *const ::std::os::raw::c_char) -> f64 {
        (self.atof.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn atoi(&self, _String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.atoi.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn atol(&self, _String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.atol.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn atoll(
        &self,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong {
        (self.atoll.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _atoi64(
        &self,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._atoi64
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _atof_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64 {
        (self
            ._atof_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _atoi_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._atoi_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _atol_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long {
        (self
            ._atol_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _atoll_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._atoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _atoi64_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._atoi64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _atoflt(
        &self,
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._atoflt
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String)
    }
    pub unsafe fn _atodbl(
        &self,
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._atodbl
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String)
    }
    pub unsafe fn _atoldbl(
        &self,
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._atoldbl
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String)
    }
    pub unsafe fn _atoflt_l(
        &self,
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._atoflt_l
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String, _Locale)
    }
    pub unsafe fn _atodbl_l(
        &self,
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._atodbl_l
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String, _Locale)
    }
    pub unsafe fn _atoldbl_l(
        &self,
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._atoldbl_l
            .as_ref()
            .expect("Expected function, got error."))(_Result, _String, _Locale)
    }
    pub unsafe fn strtof(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32 {
        (self.strtof.as_ref().expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _strtof_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32 {
        (self
            ._strtof_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn strtod(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self.strtod.as_ref().expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _strtod_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64 {
        (self
            ._strtod_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn strtold(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self
            .strtold
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr)
    }
    pub unsafe fn _strtold_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64 {
        (self
            ._strtold_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Locale)
    }
    pub unsafe fn strtol(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self.strtol.as_ref().expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtol_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long {
        (self
            ._strtol_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn strtoll(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .strtoll
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtoll_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._strtoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn strtoul(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strtoul
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtoul_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong {
        (self
            ._strtoul_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn strtoull(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtoull
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtoull_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._strtoull_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn _strtoi64(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._strtoi64
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtoi64_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong {
        (self
            ._strtoi64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn _strtoui64(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._strtoui64
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix)
    }
    pub unsafe fn _strtoui64_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            ._strtoui64_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _EndPtr, _Radix, _Locale)
    }
    pub unsafe fn _itoa_s(
        &self,
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._itoa_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _itoa(
        &self,
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self._itoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ltoa_s(
        &self,
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ltoa_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ltoa(
        &self,
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self._ltoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ultoa_s(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ultoa_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ultoa(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self._ultoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _i64toa_s(
        &self,
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._i64toa_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _i64toa(
        &self,
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._i64toa
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ui64toa_s(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ui64toa_s
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _BufferCount, _Radix)
    }
    pub unsafe fn _ui64toa(
        &self,
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._ui64toa
            .as_ref()
            .expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn _ecvt_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._ecvt_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Buffer,
            _BufferCount,
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn _ecvt(
        &self,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self._ecvt.as_ref().expect("Expected function, got error."))(
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn _fcvt_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._fcvt_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Buffer,
            _BufferCount,
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn _fcvt(
        &self,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self._fcvt.as_ref().expect("Expected function, got error."))(
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn _gcvt_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._gcvt_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Buffer, _BufferCount, _Value, _DigitCount
        )
    }
    pub unsafe fn _gcvt(
        &self,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self._gcvt.as_ref().expect("Expected function, got error."))(_Value, _DigitCount, _Buffer)
    }
    pub unsafe fn ___mb_cur_max_func(&self) -> ::std::os::raw::c_int {
        (self
            .___mb_cur_max_func
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ___mb_cur_max_l_func(&self, _Locale: _locale_t) -> ::std::os::raw::c_int {
        (self
            .___mb_cur_max_l_func
            .as_ref()
            .expect("Expected function, got error."))(_Locale)
    }
    pub unsafe fn mblen(
        &self,
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self.mblen.as_ref().expect("Expected function, got error."))(_Ch, _MaxCount)
    }
    pub unsafe fn _mblen_l(
        &self,
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._mblen_l
            .as_ref()
            .expect("Expected function, got error."))(_Ch, _MaxCount, _Locale)
    }
    pub unsafe fn _mbstrlen(&self, _String: *const ::std::os::raw::c_char) -> usize {
        (self
            ._mbstrlen
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _mbstrlen_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._mbstrlen_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _mbstrnlen(
        &self,
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize {
        (self
            ._mbstrnlen
            .as_ref()
            .expect("Expected function, got error."))(_String, _MaxCount)
    }
    pub unsafe fn _mbstrnlen_l(
        &self,
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._mbstrnlen_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _MaxCount, _Locale)
    }
    pub unsafe fn mbtowc(
        &self,
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int {
        (self.mbtowc.as_ref().expect("Expected function, got error."))(
            _DstCh,
            _SrcCh,
            _SrcSizeInBytes,
        )
    }
    pub unsafe fn _mbtowc_l(
        &self,
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._mbtowc_l
            .as_ref()
            .expect("Expected function, got error."))(
            _DstCh, _SrcCh, _SrcSizeInBytes, _Locale
        )
    }
    pub unsafe fn mbstowcs_s(
        &self,
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t {
        (self
            .mbstowcs_s
            .as_ref()
            .expect("Expected function, got error."))(
            _PtNumOfCharConverted,
            _DstBuf,
            _SizeInWords,
            _SrcBuf,
            _MaxCount,
        )
    }
    pub unsafe fn mbstowcs(
        &self,
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize {
        (self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error."))(_Dest, _Source, _MaxCount)
    }
    pub unsafe fn _mbstowcs_s_l(
        &self,
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._mbstowcs_s_l
            .as_ref()
            .expect("Expected function, got error."))(
            _PtNumOfCharConverted,
            _DstBuf,
            _SizeInWords,
            _SrcBuf,
            _MaxCount,
            _Locale,
        )
    }
    pub unsafe fn _mbstowcs_l(
        &self,
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._mbstowcs_l
            .as_ref()
            .expect("Expected function, got error."))(_Dest, _Source, _MaxCount, _Locale)
    }
    pub unsafe fn wctomb(
        &self,
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
    ) -> ::std::os::raw::c_int {
        (self.wctomb.as_ref().expect("Expected function, got error."))(_MbCh, _WCh)
    }
    pub unsafe fn _wctomb_l(
        &self,
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wctomb_l
            .as_ref()
            .expect("Expected function, got error."))(_MbCh, _WCh, _Locale)
    }
    pub unsafe fn wctomb_s(
        &self,
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t {
        (self
            .wctomb_s
            .as_ref()
            .expect("Expected function, got error."))(
            _SizeConverted, _MbCh, _SizeInBytes, _WCh
        )
    }
    pub unsafe fn _wctomb_s_l(
        &self,
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._wctomb_s_l
            .as_ref()
            .expect("Expected function, got error."))(
            _SizeConverted,
            _MbCh,
            _SizeInBytes,
            _WCh,
            _Locale,
        )
    }
    pub unsafe fn wcstombs_s(
        &self,
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t {
        (self
            .wcstombs_s
            .as_ref()
            .expect("Expected function, got error."))(
            _PtNumOfCharConverted,
            _Dst,
            _DstSizeInBytes,
            _Src,
            _MaxCountInBytes,
        )
    }
    pub unsafe fn wcstombs(
        &self,
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize {
        (self
            .wcstombs
            .as_ref()
            .expect("Expected function, got error."))(_Dest, _Source, _MaxCount)
    }
    pub unsafe fn _wcstombs_s_l(
        &self,
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._wcstombs_s_l
            .as_ref()
            .expect("Expected function, got error."))(
            _PtNumOfCharConverted,
            _Dst,
            _DstSizeInBytes,
            _Src,
            _MaxCountInBytes,
            _Locale,
        )
    }
    pub unsafe fn _wcstombs_l(
        &self,
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._wcstombs_l
            .as_ref()
            .expect("Expected function, got error."))(_Dest, _Source, _MaxCount, _Locale)
    }
    pub unsafe fn _fullpath(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._fullpath
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _Path, _BufferCount)
    }
    pub unsafe fn _makepath_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            ._makepath_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Buffer,
            _BufferCount,
            _Drive,
            _Dir,
            _Filename,
            _Ext,
        )
    }
    pub unsafe fn _makepath(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> () {
        (self
            ._makepath
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _Drive, _Dir, _Filename, _Ext)
    }
    pub unsafe fn _splitpath(
        &self,
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    ) -> () {
        (self
            ._splitpath
            .as_ref()
            .expect("Expected function, got error."))(
            _FullPath, _Drive, _Dir, _Filename, _Ext
        )
    }
    pub unsafe fn _splitpath_s(
        &self,
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t {
        (self
            ._splitpath_s
            .as_ref()
            .expect("Expected function, got error."))(
            _FullPath,
            _Drive,
            _DriveCount,
            _Dir,
            _DirCount,
            _Filename,
            _FilenameCount,
            _Ext,
            _ExtCount,
        )
    }
    pub unsafe fn getenv_s(
        &self,
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            .getenv_s
            .as_ref()
            .expect("Expected function, got error."))(
            _RequiredCount,
            _Buffer,
            _BufferCount,
            _VarName,
        )
    }
    pub unsafe fn __p___argc(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__p___argc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p___argv(&self) -> *mut *mut *mut ::std::os::raw::c_char {
        (self
            .__p___argv
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p___wargv(&self) -> *mut *mut *mut wchar_t {
        (self
            .__p___wargv
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p__environ(&self) -> *mut *mut *mut ::std::os::raw::c_char {
        (self
            .__p__environ
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __p__wenviron(&self) -> *mut *mut *mut wchar_t {
        (self
            .__p__wenviron
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getenv(
        &self,
        _VarName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.getenv.as_ref().expect("Expected function, got error."))(_VarName)
    }
    pub unsafe fn _dupenv_s(
        &self,
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            ._dupenv_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _BufferCount, _VarName)
    }
    pub unsafe fn system(&self, _Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.system.as_ref().expect("Expected function, got error."))(_Command)
    }
    pub unsafe fn _putenv(
        &self,
        _EnvString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._putenv
            .as_ref()
            .expect("Expected function, got error."))(_EnvString)
    }
    pub unsafe fn _putenv_s(
        &self,
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            ._putenv_s
            .as_ref()
            .expect("Expected function, got error."))(_Name, _Value)
    }
    pub unsafe fn _searchenv_s(
        &self,
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t {
        (self
            ._searchenv_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Filename, _VarName, _Buffer, _BufferCount
        )
    }
    pub unsafe fn _searchenv(
        &self,
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> () {
        (self
            ._searchenv
            .as_ref()
            .expect("Expected function, got error."))(_Filename, _VarName, _Buffer)
    }
    pub unsafe fn _seterrormode(&self, _Mode: ::std::os::raw::c_int) -> () {
        (self
            ._seterrormode
            .as_ref()
            .expect("Expected function, got error."))(_Mode)
    }
    pub unsafe fn _beep(
        &self,
        _Frequency: ::std::os::raw::c_uint,
        _Duration: ::std::os::raw::c_uint,
    ) -> () {
        (self._beep.as_ref().expect("Expected function, got error."))(_Frequency, _Duration)
    }
    pub unsafe fn _sleep(&self, _Duration: ::std::os::raw::c_ulong) -> () {
        (self._sleep.as_ref().expect("Expected function, got error."))(_Duration)
    }
    pub unsafe fn ecvt(
        &self,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ecvt.as_ref().expect("Expected function, got error."))(
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn fcvt(
        &self,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.fcvt.as_ref().expect("Expected function, got error."))(
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign,
        )
    }
    pub unsafe fn gcvt(
        &self,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.gcvt.as_ref().expect("Expected function, got error."))(_Value, _DigitCount, _DstBuf)
    }
    pub unsafe fn itoa(
        &self,
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.itoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn ltoa(
        &self,
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ltoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn swab(
        &self,
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    ) -> () {
        (self.swab.as_ref().expect("Expected function, got error."))(_Buf1, _Buf2, _SizeInBytes)
    }
    pub unsafe fn ultoa(
        &self,
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ultoa.as_ref().expect("Expected function, got error."))(_Value, _Buffer, _Radix)
    }
    pub unsafe fn putenv(
        &self,
        _EnvString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.putenv.as_ref().expect("Expected function, got error."))(_EnvString)
    }
    pub unsafe fn onexit(&self, _Func: _onexit_t) -> _onexit_t {
        (self.onexit.as_ref().expect("Expected function, got error."))(_Func)
    }
    pub unsafe fn memchr(
        &self,
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memchr.as_ref().expect("Expected function, got error."))(_Buf, _Val, _MaxCount)
    }
    pub unsafe fn memcmp(
        &self,
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self.memcmp.as_ref().expect("Expected function, got error."))(_Buf1, _Buf2, _Size)
    }
    pub unsafe fn memcpy(
        &self,
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memcpy.as_ref().expect("Expected function, got error."))(_Dst, _Src, _Size)
    }
    pub unsafe fn memmove(
        &self,
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memmove
            .as_ref()
            .expect("Expected function, got error."))(_Dst, _Src, _Size)
    }
    pub unsafe fn memset(
        &self,
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memset.as_ref().expect("Expected function, got error."))(_Dst, _Val, _Size)
    }
    pub unsafe fn strchr(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.strchr.as_ref().expect("Expected function, got error."))(_Str, _Val)
    }
    pub unsafe fn strrchr(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strrchr
            .as_ref()
            .expect("Expected function, got error."))(_Str, _Ch)
    }
    pub unsafe fn strstr(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strstr.as_ref().expect("Expected function, got error."))(_Str, _SubStr)
    }
    pub unsafe fn wcschr(
        &self,
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort {
        (self.wcschr.as_ref().expect("Expected function, got error."))(_Str, _Ch)
    }
    pub unsafe fn wcsrchr(&self, _Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t {
        (self
            .wcsrchr
            .as_ref()
            .expect("Expected function, got error."))(_Str, _Ch)
    }
    pub unsafe fn wcsstr(&self, _Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t {
        (self.wcsstr.as_ref().expect("Expected function, got error."))(_Str, _SubStr)
    }
    pub unsafe fn _memicmp(
        &self,
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._memicmp
            .as_ref()
            .expect("Expected function, got error."))(_Buf1, _Buf2, _Size)
    }
    pub unsafe fn _memicmp_l(
        &self,
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._memicmp_l
            .as_ref()
            .expect("Expected function, got error."))(_Buf1, _Buf2, _Size, _Locale)
    }
    pub unsafe fn memccpy(
        &self,
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memccpy
            .as_ref()
            .expect("Expected function, got error."))(_Dst, _Src, _Val, _Size)
    }
    pub unsafe fn memicmp(
        &self,
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .memicmp
            .as_ref()
            .expect("Expected function, got error."))(_Buf1, _Buf2, _Size)
    }
    pub unsafe fn wcscat_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t {
        (self
            .wcscat_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _SizeInWords, _Source)
    }
    pub unsafe fn wcscpy_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t {
        (self
            .wcscpy_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _SizeInWords, _Source)
    }
    pub unsafe fn wcsncat_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t {
        (self
            .wcsncat_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination,
            _SizeInWords,
            _Source,
            _MaxCount,
        )
    }
    pub unsafe fn wcsncpy_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t {
        (self
            .wcsncpy_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination,
            _SizeInWords,
            _Source,
            _MaxCount,
        )
    }
    pub unsafe fn wcstok_s(
        &self,
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t {
        (self
            .wcstok_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _Delimiter, _Context)
    }
    pub unsafe fn _wcsdup(&self, _String: *const wchar_t) -> *mut wchar_t {
        (self
            ._wcsdup
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcscat(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
    ) -> *mut wchar_t {
        (self.wcscat.as_ref().expect("Expected function, got error."))(_Destination, _Source)
    }
    pub unsafe fn wcscmp(
        &self,
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int {
        (self.wcscmp.as_ref().expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn wcscpy(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
    ) -> *mut wchar_t {
        (self.wcscpy.as_ref().expect("Expected function, got error."))(_Destination, _Source)
    }
    pub unsafe fn wcscspn(&self, _String: *const wchar_t, _Control: *const wchar_t) -> usize {
        (self
            .wcscspn
            .as_ref()
            .expect("Expected function, got error."))(_String, _Control)
    }
    pub unsafe fn wcslen(
        &self,
        _String: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_ulonglong {
        (self.wcslen.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcsnlen(&self, _Source: *const wchar_t, _MaxCount: usize) -> usize {
        (self
            .wcsnlen
            .as_ref()
            .expect("Expected function, got error."))(_Source, _MaxCount)
    }
    pub unsafe fn wcsncat(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t {
        (self
            .wcsncat
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _Count)
    }
    pub unsafe fn wcsncmp(
        &self,
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self
            .wcsncmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn wcsncpy(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t {
        (self
            .wcsncpy
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _Count)
    }
    pub unsafe fn wcspbrk(
        &self,
        _String: *const wchar_t,
        _Control: *const wchar_t,
    ) -> *mut wchar_t {
        (self
            .wcspbrk
            .as_ref()
            .expect("Expected function, got error."))(_String, _Control)
    }
    pub unsafe fn wcsspn(&self, _String: *const wchar_t, _Control: *const wchar_t) -> usize {
        (self.wcsspn.as_ref().expect("Expected function, got error."))(_String, _Control)
    }
    pub unsafe fn wcstok(
        &self,
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t {
        (self.wcstok.as_ref().expect("Expected function, got error."))(
            _String, _Delimiter, _Context,
        )
    }
    pub unsafe fn _wcserror(&self, _ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t {
        (self
            ._wcserror
            .as_ref()
            .expect("Expected function, got error."))(_ErrorNumber)
    }
    pub unsafe fn _wcserror_s(
        &self,
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._wcserror_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _SizeInWords, _ErrorNumber)
    }
    pub unsafe fn __wcserror(&self, _String: *const wchar_t) -> *mut wchar_t {
        (self
            .__wcserror
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn __wcserror_s(
        &self,
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t {
        (self
            .__wcserror_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _SizeInWords, _ErrorMessage)
    }
    pub unsafe fn _wcsicmp(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _wcsicmp_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsicmp_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn _wcsnicmp(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsnicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _wcsnicmp_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsnicmp_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn _wcsnset_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t {
        (self
            ._wcsnset_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination, _SizeInWords, _Value, _MaxCount
        )
    }
    pub unsafe fn _wcsnset(
        &self,
        _String: *mut wchar_t,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> *mut wchar_t {
        (self
            ._wcsnset
            .as_ref()
            .expect("Expected function, got error."))(_String, _Value, _MaxCount)
    }
    pub unsafe fn _wcsrev(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self
            ._wcsrev
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wcsset_s(
        &self,
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
    ) -> errno_t {
        (self
            ._wcsset_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _SizeInWords, _Value)
    }
    pub unsafe fn _wcsset(&self, _String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t {
        (self
            ._wcsset
            .as_ref()
            .expect("Expected function, got error."))(_String, _Value)
    }
    pub unsafe fn _wcslwr_s(&self, _String: *mut wchar_t, _SizeInWords: usize) -> errno_t {
        (self
            ._wcslwr_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _SizeInWords)
    }
    pub unsafe fn _wcslwr(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self
            ._wcslwr
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wcslwr_s_l(
        &self,
        _String: *mut wchar_t,
        _SizeInWords: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._wcslwr_s_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _SizeInWords, _Locale)
    }
    pub unsafe fn _wcslwr_l(&self, _String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t {
        (self
            ._wcslwr_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn _wcsupr_s(&self, _String: *mut wchar_t, _Size: usize) -> errno_t {
        (self
            ._wcsupr_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size)
    }
    pub unsafe fn _wcsupr(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self
            ._wcsupr
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _wcsupr_s_l(
        &self,
        _String: *mut wchar_t,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._wcsupr_s_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size, _Locale)
    }
    pub unsafe fn _wcsupr_l(&self, _String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t {
        (self
            ._wcsupr_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn wcsxfrm(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize {
        (self
            .wcsxfrm
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _MaxCount)
    }
    pub unsafe fn _wcsxfrm_l(
        &self,
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._wcsxfrm_l
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination, _Source, _MaxCount, _Locale
        )
    }
    pub unsafe fn wcscoll(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            .wcscoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _wcscoll_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcscoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn _wcsicoll(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsicoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _wcsicoll_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsicoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn _wcsncoll(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsncoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _wcsncoll_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsncoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn _wcsnicoll(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsnicoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _wcsnicoll_l(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._wcsnicoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn wcsdup(&self, _String: *const wchar_t) -> *mut wchar_t {
        (self.wcsdup.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcsicmp(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            .wcsicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn wcsnicmp(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .wcsnicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn wcsnset(
        &self,
        _String: *mut wchar_t,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> *mut wchar_t {
        (self
            .wcsnset
            .as_ref()
            .expect("Expected function, got error."))(_String, _Value, _MaxCount)
    }
    pub unsafe fn wcsrev(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self.wcsrev.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcsset(&self, _String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t {
        (self.wcsset.as_ref().expect("Expected function, got error."))(_String, _Value)
    }
    pub unsafe fn wcslwr(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self.wcslwr.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcsupr(&self, _String: *mut wchar_t) -> *mut wchar_t {
        (self.wcsupr.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn wcsicoll(
        &self,
        _String1: *const wchar_t,
        _String2: *const wchar_t,
    ) -> ::std::os::raw::c_int {
        (self
            .wcsicoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn strcpy_s(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            .strcpy_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _SizeInBytes, _Source)
    }
    pub unsafe fn strcat_s(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            .strcat_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _SizeInBytes, _Source)
    }
    pub unsafe fn strerror_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            .strerror_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _SizeInBytes, _ErrorNumber)
    }
    pub unsafe fn strncat_s(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t {
        (self
            .strncat_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination,
            _SizeInBytes,
            _Source,
            _MaxCount,
        )
    }
    pub unsafe fn strncpy_s(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t {
        (self
            .strncpy_s
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination,
            _SizeInBytes,
            _Source,
            _MaxCount,
        )
    }
    pub unsafe fn strtok_s(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strtok_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _Delimiter, _Context)
    }
    pub unsafe fn _memccpy(
        &self,
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            ._memccpy
            .as_ref()
            .expect("Expected function, got error."))(_Dst, _Src, _Val, _MaxCount)
    }
    pub unsafe fn strcat(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcat.as_ref().expect("Expected function, got error."))(_Destination, _Source)
    }
    pub unsafe fn strcmp(
        &self,
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.strcmp.as_ref().expect("Expected function, got error."))(_Str1, _Str2)
    }
    pub unsafe fn _strcmpi(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._strcmpi
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn strcoll(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _strcoll_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._strcoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn strcpy(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcpy.as_ref().expect("Expected function, got error."))(_Destination, _Source)
    }
    pub unsafe fn strcspn(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strcspn
            .as_ref()
            .expect("Expected function, got error."))(_Str, _Control)
    }
    pub unsafe fn _strdup(
        &self,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strdup
            .as_ref()
            .expect("Expected function, got error."))(_Source)
    }
    pub unsafe fn _strerror(
        &self,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strerror
            .as_ref()
            .expect("Expected function, got error."))(_ErrorMessage)
    }
    pub unsafe fn _strerror_s(
        &self,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t {
        (self
            ._strerror_s
            .as_ref()
            .expect("Expected function, got error."))(_Buffer, _SizeInBytes, _ErrorMessage)
    }
    pub unsafe fn strerror(
        &self,
        _ErrorMessage: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strerror
            .as_ref()
            .expect("Expected function, got error."))(_ErrorMessage)
    }
    pub unsafe fn _stricmp(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._stricmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _stricoll(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            ._stricoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn _stricoll_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._stricoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn _stricmp_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._stricmp_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _Locale)
    }
    pub unsafe fn strlen(
        &self,
        _Str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong {
        (self.strlen.as_ref().expect("Expected function, got error."))(_Str)
    }
    pub unsafe fn _strlwr_s(&self, _String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t {
        (self
            ._strlwr_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size)
    }
    pub unsafe fn _strlwr(
        &self,
        _String: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strlwr
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _strlwr_s_l(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._strlwr_s_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size, _Locale)
    }
    pub unsafe fn _strlwr_l(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strlwr_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn strncat(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncat
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _Count)
    }
    pub unsafe fn strncmp(
        &self,
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int {
        (self
            .strncmp
            .as_ref()
            .expect("Expected function, got error."))(_Str1, _Str2, _MaxCount)
    }
    pub unsafe fn _strnicmp(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._strnicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _strnicmp_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._strnicmp_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn _strnicoll(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._strnicoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _strnicoll_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._strnicoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn _strncoll(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            ._strncoll
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn _strncoll_l(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            ._strncoll_l
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount, _Locale)
    }
    pub unsafe fn __strncnt(&self, _String: *const ::std::os::raw::c_char, _Count: usize) -> usize {
        (self
            .__strncnt
            .as_ref()
            .expect("Expected function, got error."))(_String, _Count)
    }
    pub unsafe fn strncpy(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncpy
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _Count)
    }
    pub unsafe fn strnlen(
        &self,
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize {
        (self
            .strnlen
            .as_ref()
            .expect("Expected function, got error."))(_String, _MaxCount)
    }
    pub unsafe fn _strnset_s(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t {
        (self
            ._strnset_s
            .as_ref()
            .expect("Expected function, got error."))(
            _String, _SizeInBytes, _Value, _MaxCount
        )
    }
    pub unsafe fn _strnset(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strnset
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Value, _Count)
    }
    pub unsafe fn strpbrk(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strpbrk
            .as_ref()
            .expect("Expected function, got error."))(_Str, _Control)
    }
    pub unsafe fn _strrev(&self, _Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            ._strrev
            .as_ref()
            .expect("Expected function, got error."))(_Str)
    }
    pub unsafe fn _strset_s(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t {
        (self
            ._strset_s
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _DestinationSize, _Value)
    }
    pub unsafe fn _strset(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strset
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Value)
    }
    pub unsafe fn strspn(
        &self,
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong {
        (self.strspn.as_ref().expect("Expected function, got error."))(_Str, _Control)
    }
    pub unsafe fn strtok(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strtok.as_ref().expect("Expected function, got error."))(_String, _Delimiter)
    }
    pub unsafe fn _strupr_s(&self, _String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t {
        (self
            ._strupr_s
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size)
    }
    pub unsafe fn _strupr(
        &self,
        _String: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strupr
            .as_ref()
            .expect("Expected function, got error."))(_String)
    }
    pub unsafe fn _strupr_s_l(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t {
        (self
            ._strupr_s_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Size, _Locale)
    }
    pub unsafe fn _strupr_l(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            ._strupr_l
            .as_ref()
            .expect("Expected function, got error."))(_String, _Locale)
    }
    pub unsafe fn strxfrm(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strxfrm
            .as_ref()
            .expect("Expected function, got error."))(_Destination, _Source, _MaxCount)
    }
    pub unsafe fn _strxfrm_l(
        &self,
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize {
        (self
            ._strxfrm_l
            .as_ref()
            .expect("Expected function, got error."))(
            _Destination, _Source, _MaxCount, _Locale
        )
    }
    pub unsafe fn strdup(
        &self,
        _String: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strdup.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn strcmpi(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcmpi
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn stricmp(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .stricmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2)
    }
    pub unsafe fn strlwr(
        &self,
        _String: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strlwr.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn strnicmp(
        &self,
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .strnicmp
            .as_ref()
            .expect("Expected function, got error."))(_String1, _String2, _MaxCount)
    }
    pub unsafe fn strnset(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strnset
            .as_ref()
            .expect("Expected function, got error."))(_String, _Value, _MaxCount)
    }
    pub unsafe fn strrev(
        &self,
        _String: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strrev.as_ref().expect("Expected function, got error."))(_String)
    }
    pub unsafe fn strset(
        &self,
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.strset.as_ref().expect("Expected function, got error."))(_String, _Value)
    }
    pub unsafe fn strupr(
        &self,
        _String: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strupr.as_ref().expect("Expected function, got error."))(_String)
    }
    #[doc = " \\brief The Onnxruntime library's entry point to access the C API"]
    #[doc = ""]
    #[doc = " Call this to get the a pointer to an ::OrtApiBase"]
    pub unsafe fn OrtGetApiBase(&self) -> *const OrtApiBase {
        (self
            .OrtGetApiBase
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OrtSessionOptionsAppendExecutionProvider_CUDA(
        &self,
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr {
        (self
            .OrtSessionOptionsAppendExecutionProvider_CUDA
            .as_ref()
            .expect("Expected function, got error."))(options, device_id)
    }
    pub unsafe fn OrtSessionOptionsAppendExecutionProvider_MIGraphX(
        &self,
        options: *mut OrtSessionOptions,
        device_id: ::std::os::raw::c_int,
    ) -> OrtStatusPtr {
        (self
            .OrtSessionOptionsAppendExecutionProvider_MIGraphX
            .as_ref()
            .expect("Expected function, got error."))(options, device_id)
    }
}
